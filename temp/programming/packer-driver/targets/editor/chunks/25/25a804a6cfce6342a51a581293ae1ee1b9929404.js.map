{"version":3,"sources":["file:///D:/Cocos/Project/XH/assets/Script/Other/SDK/HttpRequest.ts"],"names":["_decorator","Component","sys","ccclass","property","HttpRequest","getOpenId","callback","window","wx","login","success","res","console","log","code","params","request","response","openId","error","fail","err","isNative","endpoint","data","successCallback","errorCallback","isAbsoluteUrl","method","url","requestData","JSON","stringify","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","parse","e","open","toUpperCase","setRequestHeader","send","getplayerData","t","errno","instance"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, sys } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('HttpRequest')\r\nexport class HttpRequest extends Component {\r\n    public static readonly instance = new HttpRequest();\r\n\r\n    /**\r\n     * 获取微信OpenID\r\n     * @param callback 获取成功后的回调函数\r\n     */\r\n    getOpenId(callback?: (data?: any) => void): void {\r\n        // 检查是否在微信/头条环境\r\n        if (window.wx) {\r\n            // 调用微信登录接口\r\n            wx.login({\r\n                success: (res: { code: string }) => {\r\n                    console.log(\"微信登录成功，获取到code:\", res.code);\r\n                    // 准备请求参数\r\n                    const params = {\r\n                        code: res.code,  // 微信临时登录凭证\r\n                    };\r\n                    // 向服务器发送请求\r\n                    this.request(\r\n                        \"zdydc/user/login\",  //zdydc/user/login 登录接口路径 https://yx.megoo.top/wochengyuteniu/user/getWxOpenId\r\n                        params,\r\n                        (response: any) => {\r\n                            if (response.openId) {\r\n                                console.log(\"成功获取openid:\", response);\r\n                            } else {\r\n                                console.log(\"获取openid失败:\", response);\r\n                            }\r\n                            // 执行回调\r\n                            callback?.(response);\r\n                        },\r\n                        (error: any) => {\r\n                            console.error(\"登录接口调用失败:\", error);\r\n                            callback?.(null);\r\n                        }\r\n                    );\r\n                },\r\n                fail: (err: any) => {\r\n                    console.error(\"微信登录失败:\", err);\r\n                    callback?.(null);\r\n                }\r\n            });\r\n        } else {\r\n            // 非微信环境直接执行回调\r\n            if (callback && !sys.isNative) {\r\n                callback();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通用HTTP请求方法\r\n     * @param endpoint API端点路径\r\n     * @param data 请求数据\r\n     * @param successCallback 成功回调\r\n     * @param errorCallback 失败回调\r\n     * @param isAbsoluteUrl 是否使用绝对URL\r\n     * @param method HTTP方法，默认POST\r\n     */\r\n    request(\r\n        endpoint: string,\r\n        data: any,\r\n        successCallback: (response: any) => void,\r\n        errorCallback: (error: any) => void,\r\n        isAbsoluteUrl: boolean = false,\r\n        method: string = \"POST\"\r\n    ): void {\r\n        // 构造完整URL\r\n        let url = \"https://yx.megoo.top/\" + endpoint;\r\n        console.log(\"请求URL:\", url, \"请求数据:\", data);\r\n\r\n        // 如果已经是绝对URL，则直接使用\r\n        if (isAbsoluteUrl) {\r\n            url = endpoint;\r\n        }\r\n\r\n        // 序列化请求数据\r\n        const requestData = JSON.stringify(data);\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        // 状态变更回调\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {  // 请求完成\r\n                if (xhr.status === 200) {  // 成功响应\r\n                    let response = null;\r\n                    if (xhr.responseText !== \"\") {\r\n                        try {\r\n                            // 解析响应数据\r\n                            response = JSON.parse(xhr.responseText);\r\n                        } catch (e) {\r\n                            console.error(\"响应数据解析失败:\", e);\r\n                        }\r\n                    }\r\n                    successCallback?.(response);\r\n                } else {\r\n                    // 构造错误对象\r\n                    const error = {\r\n                        url: url,\r\n                        readyState: xhr.readyState,\r\n                        status: xhr.status,\r\n                        data: requestData\r\n                    };\r\n                    errorCallback?.(error);\r\n                }\r\n            }\r\n        };\r\n\r\n        // 初始化请求\r\n        xhr.open(method, url, true);\r\n        // 设置请求头（非GET请求）\r\n        if (method.toUpperCase() !== \"GET\") {\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json; charset=utf-8\");\r\n            xhr.send(requestData);\r\n        } else {\r\n            xhr.send();\r\n        }\r\n    }\r\n\r\n    getplayerData(t) {\r\n        this.request(\"ot/gqsxz/savedata\", {\r\n            openId: t\r\n        }, function (t) {\r\n            console.log(\"-----------getplayerData:\", t);\r\n            if (0 == t.errno) {\r\n                t.data;\r\n            } else {\r\n                console.log(\"-----------获取用户数据:\", t);\r\n            }\r\n        }, function (t) {\r\n            console.log(\"getplayerData 调用失败\", t);\r\n        });\r\n    };\r\n\r\n}\r\n\r\n\r\n"]}