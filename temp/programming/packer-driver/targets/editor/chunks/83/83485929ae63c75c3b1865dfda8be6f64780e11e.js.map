{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/ZhiShangGouBuDao/assets/Script/Game/GameMode/PanelFilm.ts"],"names":[],"mappingssourcesContent":["// import { _decorator, color, Component, find, Label, Layout, log, Node, Sprite, tween, UIOpacity, v3, Vec3, Animation } from 'cc';\n// import { PlatformApi } from '../../Other/SDK/PlatformApi';\n// import { Tool_Event } from '../../Tool/Tool_Event';\n// import { Tool_UI } from '../../Tool/Tool_UI';\n// import { PanelTemplate } from './PanelTemplate';\n// import { Tool_Animation } from '../../Tool/Tool_Animation';\n// import { Tool_Other } from '../../Tool/Tool_Other';\n// const { ccclass, property } = _decorator;\n\n// /**影视数据类型 */\n// type TypeData = {\n//     Correct: string;\n//     Wrong: string;\n//     Hints: string,\n//     Movie: string,\n// }\n\n// @ccclass('PanelFilm')\n// export class PanelFilm extends PanelTemplate {\n\n//     /**Key数据 */\n//     KeyData: TypeData = null;\n\n//     /**Value字符串 */\n//     ValueStr: string = \"\";\n//     /**Value索引 */\n//     ValueIndex: number = 0;\n//     /**是否移动 */\n//     ValueMoveing: boolean = false;\n\n//     /**提示状态 */\n//     TipState: boolean = false;\n\n//     /**返回按钮 */\n//     BtnBreak: Node = null;\n//     /**获取答案按钮 */\n//     BtnGet: Node = null;\n//     /**答案状态 */\n//     GetState: boolean = false;\n//     /**删除按钮 */\n//     BtnDelete: Node = null;\n\n//     async onLoad() {\n//         super.onLoad();\n//     }\n\n//     async onEnable() {\n//         if (!this.IsInit) {\n//             await this.LoadPanel();\n//         }\n//         this.GameStart();\n//         this.Resoure_Data.Music_Play(\"Audio/BGMGame\");\n//     }\n\n//     async start() {\n\n//     }\n\n//     /**加载面板 */\n//     async LoadPanel(): Promise<void> {\n//         return new Promise(async (resolve, reject) => {\n//             /**绑定关键节点 */\n//             this.BtnSetting = find(\"BtnSetting\", this.node);\n//             this.BtnTip = find(\"BtnTip\", this.node);\n//             this.PanelTip = find(\"PanelTip\", this.node);\n//             this.BtnTipClose = find(\"BtnTipClose\", this.PanelTip);\n//             this.PanelVictory = find(\"PanelVictory\", this.node);\n//             this.BtnNext = find(\"BtnNext\", this.PanelVictory);\n//             this.BtnBreak = find(\"BtnBreak\", this.PanelVictory);\n//             this.BtnGet = find(\"BtnGet\", this.PanelTip);\n//             this.BtnDelete = find(\"Key/BtnDelete\", this.node);\n//             /**注册按钮事件 */\n//             await this.OnBtn(this.Game_Script.AnimSwitch);\n//             this.IsInit = true;\n//             resolve();\n//         });\n//     }\n\n//     /**注册按钮 */\n//     async OnBtn(AnimSwitch: boolean = false) {\n//         /**设置按钮 */\n//         const BtnSettingCall = () => {\n//             this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//             this.Game_Script.UpdatePanelSetting(true);\n//         }\n//         /**提示按钮 */\n//         const BtnTipCall = () => {\n//             this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//             if (this.TipState) {\n//                 this.PanelTip.active = true;\n//             } else {\n//                 const Call = () => {\n//                     this.TipState = true;\n//                     this.Game_Script.IsHint = true;\n//                     this.PanelTip.active = true;\n//                 }\n//                 if (this.Game_Script.PropNum > 0) {\n//                     this.Game_Script.PropNum--;\n//                     this.Game_Script.DataSet();\n//                     this.UpdatePropUI();\n//                     Call();\n//                 } else {\n//                     PlatformApi.instance.showVideoAd(async () => {\n//                         Call();\n//                     }, () => {\n\n//                     });\n//                 }\n//             }\n//         }\n//         /**关闭提示界面 */\n//         const BtnTipCloseCall = () => {\n//             this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//             this.PanelTip.active = false;\n//         }\n//         /**下一关按钮 */\n//         const BtnNextCall = () => {\n//             this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//             this.GameStart();\n//         }\n//         /**关闭按钮 */\n//         const BtnCloseCall = () => {\n//             this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//             this.node.active = false;\n//         }\n//         /**获取答案 */\n//         const BtnGetCall = () => {\n//             this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//             if (this.GetState) {\n//                 return;\n//             }\n//             this.GetState = true;\n//             let Grid = find(\"Window/Grid\", this.PanelTip);\n//             PlatformApi.instance.showVideoAd(async () => {\n//                 for (let i = 0; i < Grid.children.length; i++) {\n//                     Grid.children[i].getChildByName(\"Lock\").active = false;\n//                     Grid.children[i].getChildByName(\"Label\").active = !Grid.children[i].getChildByName(\"Lock\").active;\n//                 }\n//             }, () => {\n\n//             });\n//         }\n//         /**删除按钮 */\n//         const BtnDeleteCall = () => {\n//             this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//             if (this.ValueIndex > 0) {\n//                 let Key = find(\"Key\", this.node);\n//                 Key.children[this.ValueIndex - 1].getChildByName(\"Label\").getComponent(Label).string = \"\";\n//                 this.ValueStr = this.ValueStr.substring(0, this.ValueStr.length - 1);\n//                 Tool_UI.instance.Set_UIOpacity(Btns[this.ValueIndex - 1], 255);\n//                 this.ValueIndex--;\n//             }\n//         }\n//         /**设置按钮事件 */\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnSetting, BtnSettingCall);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnTip, BtnTipCall);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnTipClose, BtnTipCloseCall);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnNext, BtnNextCall);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnBreak, BtnCloseCall);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnGet, BtnGetCall);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnDelete, BtnDeleteCall);\n//         /**设置按钮动画 */\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnSetting, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnTip, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnTipClose, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnNext, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnBreak, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnGet, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnDelete, AnimSwitch);\n//         let Key = find(\"Key\", this.node);\n//         let Value = find(\"Value\", this.node);\n//         let Btns: Node[] = [];\n//         for (let i = 0; i < Value.children.length; i++) {\n//             const Component_UIOpacity = Tool_UI.instance.Component_Get(Value.children[i], UIOpacity);\n//             Tool_Event.instance.On_Event_TOUCH_END(Value.children[i], () => {\n//                 if (Component_UIOpacity.opacity == 255) {\n//                     if (this.ValueMoveing) {\n//                         return;\n//                     }\n//                     if (this.KeyData == null || this.KeyData == undefined) {\n//                         return;\n//                     }\n//                     this.Resoure_Data.Sound_Play(\"Audio/Sound/Click\");\n//                     this.ValueMoveing = true;\n//                     Component_UIOpacity.opacity = 155;\n//                     Btns[this.ValueIndex] = Value.children[i];\n//                     let Char = Value.children[i].getChildByName(\"Label\").getComponent(Label).string;\n//                     let Result = this.GetResult(Char);\n//                     if (Result.isValid) {\n\n//                         if (this.ValueIndex == 1) {\n//                             /**首字正确 */\n//                             this.Resoure_Data.Sound_Play(\"Audio/Sound/FirstCorrect\");\n//                         }\n\n\n//                         Key.children[this.ValueIndex - 1].getChildByName(\"Label\").getComponent(Label).string = Char;\n//                         if (Result.isComplete) {\n//                             this.GameVictory();\n//                         } else {\n//                             this.ValueMoveing = false;\n//                         }\n//                     } else {\n//                         /**错误 */\n//                         this.Resoure_Data.Sound_Play(\"Audio/Sound/Error\");\n//                         Key.children[this.ValueIndex].getChildByName(\"Label\").getComponent(Label).string = Char;\n//                         let KeyLabel = Key.children[this.ValueIndex].getChildByName(\"Label\");\n//                         KeyLabel.getComponent(Label).color = color(255, 0, 0, 255);\n//                         tween(KeyLabel)\n//                             .by(0.05, { position: v3(-25, 0, 0) }, { easing: \"quadOut\" })\n//                             .by(0.1, { position: v3(50, 0, 0) }, { easing: \"quadOut\" })\n//                             .by(0.05, { position: v3(-25, 0, 0) }, { easing: \"quadOut\" })\n//                             .call(() => {\n//                             })\n//                             .start();\n//                         this.scheduleOnce(() => {\n//                             KeyLabel.getComponent(Label).string = \"\";\n//                             KeyLabel.getComponent(Label).color = color(0, 0, 0, 255);\n//                             Component_UIOpacity.opacity = 255;\n//                             this.ValueMoveing = false;\n//                         }, 0.5);\n//                     }\n//                 }\n//             });\n//         }\n//     }\n\n//     /**游戏开始 */\n//     async GameStart() {\n//         if (this.Game_Script == null) {\n//             return;\n//         }\n//         /**初始化数据 */\n//         this.InitData();\n//         this.Game_Script.IsHint = false;\n//         this.PanelVictory.active = false;\n//         this.PanelTip.active = false;\n//         this.TipState = false;\n//         this.GetState = false;\n//         this.UpdatePropUI();\n//         if (this.KeyData == null || this.KeyData == undefined) {\n//             this.Game_Script.OnMessage(\"暂时没有新题目了\");\n//             return;\n//         }\n//         this.node.getChildByName(\"Title\").getChildByName(\"Leves\").getComponent(Label).string = `影视大咖·第${this.Game_Script.FilmLevel + 1}关`;\n//         let Text: string[] = [];\n//         for (let i = 0; i < this.KeyData.Correct.length; i++) {\n//             Text.push(this.KeyData.Correct.substring(i, i + 1));\n//         }\n//         for (let j = 0; j < this.KeyData.Wrong.length; j++) {\n//             Text.push(this.KeyData.Wrong.substring(j, j + 1));\n//         }\n//         /**初始化提示界面 */\n//         let Grid = find(\"Window/Grid\", this.PanelTip);\n//         for (let i = 0; i < Grid.children.length; i++) {\n//             Grid.children[i].getChildByName(\"Label\").getComponent(Label).string = this.KeyData.Hints.substring(i, i + 1);\n//             Grid.children[i].getChildByName(\"Lock\").active = true;\n//             Grid.children[i].getChildByName(\"Label\").active = !Grid.children[i].getChildByName(\"Lock\").active;\n//         }\n//         Tool_Other.instance.Sort_Random(Text);\n//         console.log(Text);\n//         let Key = find(\"Key\", this.node);\n//         let Value = find(\"Value\", this.node);\n//         Tool_UI.instance.Component_On(Value, Layout);\n//         Value.getComponent(Layout).updateLayout();\n//         for (let i = 0; i < Key.children.length - 1; i++) {\n//             Tool_Animation.instance.Tween_Stop_Target(Key.children[i]);\n//             Key.children[i].getChildByName(\"Label\").getComponent(Label).string = \"\";\n//             Key.children[i].scale = v3(1, 1, 1);\n//             Key.children[i].active = i < this.KeyData.Correct.length ? true : false;\n//         }\n//         for (let i = 0; i < Value.children.length; i++) {\n//             Tool_Animation.instance.Tween_Stop_Target(Value.children[i]);\n//             Value.children[i].getChildByName(\"Label\").getComponent(Label).string = Text[i];\n//             Tool_UI.instance.Set_UIOpacity(Value.children[i], 255);\n//             Tool_UI.instance.Set_Color_Sprite(Value.children[i].getChildByName(\"Bg\"), color(255, 227, 167, 255));\n//             Value.children[i].scale = v3(1, 1, 1);\n//             Value.children[i].active = true;\n//             Tool_UI.instance.Set_UIOpacity(Value.children[i], 0);\n//         }\n//         /**入场节点 */\n//         let EntryNodes: Node[] = [];\n//         let PosEnd: Vec3[] = [];\n//         this.scheduleOnce(async () => {\n//             for (let i = 0; i < Value.children.length; i++) {\n//                 PosEnd.push(Value.children[i].position.clone());\n//                 EntryNodes.push(Value.children[i]);\n//             }\n//             // PosEnd[Value.children.length - 1] = v3(55, 0, 0);\n//             // PosEnd[Value.children.length - 2] = v3(-55, 0, 0);\n//             Tool_UI.instance.Component_Off(Value, Layout);\n//             for (let i = 0; i < EntryNodes.length; i++) {\n//                 Tool_UI.instance.Set_Pos_X(EntryNodes[i], -640);\n//                 Tool_UI.instance.Set_UIOpacity(EntryNodes[i], 255);\n//                 // Tool_UI.instance.Node_Index_Set(EntryNodes[i], 0);\n//                 Tool_Animation.instance.Animation_Node_Move_Time(EntryNodes[i], PosEnd[i], 0.25);\n//                 await Tool_Animation.instance.Async_Wait(0.05);\n//             }\n//         });\n//     }\n\n//     /**游戏胜利 */\n//     async GameVictory() {\n//         /**胜利音效 */\n//         this.Resoure_Data.Sound_Play(\"Audio/Sound/Victory\");\n//         PlatformApi.instance.showInterstitialAd();\n//         this.Game_Script.FilmLevel++;\n//         this.Game_Script.FilmScore += this.Game_Script.IsHint ? 1 : 2;\n//         /**保存数据 */\n//         this.Game_Script.DataSet();\n//         this.Game_Script.UpdateScene();\n//         find(\"WinBanner/Condition1/Correct\", this.PanelVictory).active = !this.Game_Script.IsHint\n//         find(\"WinBanner/Condition1/Wrong\", this.PanelVictory).active = this.Game_Script.IsHint;\n//         find(\"WinBanner/Stars/StarR\", this.PanelVictory).getComponent(Sprite).grayscale = this.Game_Script.IsHint;\n//         find(\"Light\", this.PanelVictory).getComponent(Animation).play();\n//         this.PanelVictory.active = true;\n//     }\n\n//     /**刷新道具UI */\n//     UpdatePropUI() {\n//         const BtnTipLabel = this.BtnTip.getChildByName(\"PropNum\").getChildByName(\"Label\").getComponent(Label);\n//         const BtnTipNull = this.BtnTip.getChildByName(\"PropNum\").getChildByName(\"PropNumNull\");\n//         BtnTipLabel.string = `${this.Game_Script.PropNum}`;\n//         if (this.Game_Script.PropNum > 0) {\n//             BtnTipNull.active = false;\n//         } else {\n//             BtnTipNull.active = true;\n//         }\n//     }\n\n//     /**初始数据 */\n//     InitData() {\n//         this.GetData();\n//         this.ValueStr = \"\";\n//         this.ValueIndex = 0;\n//         this.ValueMoveing = false;\n//     }\n\n//     /**获取数据 */\n//     GetData() {\n//         const FilmData: TypeData[] = [\n//             // === 简单===\n//             { Correct: \"测试电影名字1\", Wrong: \"这段文字是用来凑数的好难编\", Hints: \"测试电影aa\", Movie: \"图片提示(图片的名字)\" },\n//             { Correct: \"测试电影名字2\", Wrong: \"这段文字是用来凑数的好难编\", Hints: \"测试电影ss\", Movie: \"图片提示(图片的名字)\" },\n//             { Correct: \"测试电影名字3\", Wrong: \"这段文字是用来凑数的好难编\", Hints: \"测试电影dd\", Movie: \"图片提示(图片的名字)\" },\n//             { Correct: \"测试电影名字4\", Wrong: \"这段文字是用来凑数的好难编\", Hints: \"测试电影aa\", Movie: \"图片提示(图片的名字)\" },\n//             { Correct: \"测试电影名字5\", Wrong: \"这段文字是用来凑数的好难编\", Hints: \"测试电影ss\", Movie: \"图片提示(图片的名字)\" },\n//             { Correct: \"测试电影名字6\", Wrong: \"这段文字是用来凑数的好难编\", Hints: \"测试电影dd\", Movie: \"图片提示(图片的名字)\" },\n\n//         ];\n//         if (this.Game_Script.FilmLevel >= FilmData.length) {\n//             this.KeyData = FilmData[FilmData.length - 1];\n//         } else {\n//             this.KeyData = FilmData[this.Game_Script.FilmLevel];\n//         }\n//     }\n\n//     /**获取结果 */\n//     GetResult(Char: string): { isValid: boolean, isComplete: boolean } {\n//         // 拼接新字符形成候选字符串\n//         const Candidate = this.ValueStr + Char;\n//         // 检查是否是完整成语\n//         const isComplete: boolean = Candidate === this.KeyData.Correct;\n//         // 检查是否有成语以这个候选字符串开头\n//         const isValid = this.KeyData.Correct?.startsWith(Candidate) ?? false;\n//         if (isValid) {\n//             this.ValueIndex++;\n//         }\n//         if (isComplete) {\n//             // 如果是完整成语，重置当前拼接状态\n//             this.ValueStr = \"\";\n//             return { isValid: true, isComplete: true };\n//         } else if (isValid) {\n//             // 如果是有效部分，更新当前拼接状态\n//             this.ValueStr = Candidate;\n//             return { isValid: true, isComplete: false };\n//         } else {\n//             // 无效输入，重置当前拼接状态\n//             return { isValid: false, isComplete: false };\n//         }\n//     }\n\n// }\n\n\n"]}