{"version":3,"sources":["file:///D:/Tool/Project/WoChengYuTeNiu/assets/Script/Tool/Tool_Other.ts"],"names":["_decorator","Component","v3","ccclass","property","reg_phone","reg_email","reg_birthday","Tool_Other","isPhone","str","test","isEmail","isBirthday","a","split","_d","parseInt","_m","_y","date","Date","cur_d","getDate","cur_m","getMonth","cur_y","getFullYear","maxDay","indexOf","Get_Type_Is_Abnormal","Value","undefined","console","log","isNaN","Object","keys","length","Get_Random_Int","Min","Max","Math","ceil","floor","random","Get_Random_Int_Except","Arr","Numbers_Excluded","Set","Numbers_Available","i","has","push","randomIndex","Get_Random_Arr_Deduplication","Length","debug","Range","min","Get_Random_Arr_BySet","Get_Random_Arr_ByShuffle","Result","size","Num_Random","add","Array","from","All_Numbers","_","Sort_Random","slice","Sort_Reverse","reverse","j","Sort_Ascending","sort","b","Sort_Descending","Sort_ByStringLength","Sort_ByObjectProperty","Key","Reverse","valueA","valueB","strA","String","strB","localeCompare","Sort_Alphabetically","Sort_ByDate","getTime","Get_Array_Average","Sum","reduce","acc","val","Get_Numbers_Odd","filter","num","Get_Numbers_Even","Get_Arr_Unique","Get_Arr_Merge_Unique","Arr1","Arr2","Get_Arr_Element_Frequency","frequency","item","Get_Arr_Min_And_Max","max","Get_Arr_Target_Index","Target","Arr_Index","Get_Arr_Closest_Number","Error","Closest","Current","CurrentDiff","abs","ClosestDiff","Get_Random_Pos","Min_X","Max_X","Min_Y","Max_Y","Pos_X","Pos_Y","Get_Random_Pos_Arr","Leng","MinDistance","Pos_Arr","MaxAttempts","Pos","isTooClose","some","Existing","clone","subtract","warn","Seconds_To_Time_String","Seconds","Hours","Minutes","Secs","FormattedHours","FormattedMinutes","FormattedSeconds","printCurrentTime","now","formattedTime","toLocaleString","XXL_Des","Rows","Cols","Grid","Index_1","Index_2","Index_3","XXL_Fall","Write_Pointer","Index_Start","Index_End","instance"],"mappings":"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","sourcesContent":["import { _decorator, Component, v3, Vec3 } from 'cc';\nconst { ccclass, property } = _decorator;\nconst reg_phone = /^((0\\d{2,3}-\\d{7,8})|(1[34578]\\d{9}))$/;\nconst reg_email = /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/;\nconst reg_birthday = /^[0-9]{1,2}\\/(0?[1-9]|1[12])\\/(19|20)[0-9]{2}$/;\n@ccclass('Tool_Other')\nexport class Tool_Other extends Component {\n\n    public static readonly instance = new Tool_Other();\n\n    /**验证手机号 */\n    isPhone(str: string) {\n        return reg_phone.test(str);\n    }\n    /**验证邮箱 */\n    isEmail(str: string) {\n        return reg_email.test(str);\n    }\n    /**验证生日是否正确 dd/mm/yyyy格式*/\n    isBirthday(str: string) {\n        if (!reg_birthday.test(str)) return false;//先简单匹配格式是否正确\n        let a = str.split(\"/\");\n        let _d = parseInt(a[0]);\n        let _m = parseInt(a[1]);\n        let _y = parseInt(a[2]);\n        let date = new Date();\n        let cur_d = date.getDate();\n        let cur_m = date.getMonth() + 1;\n        let cur_y = date.getFullYear();\n        if (_y > cur_y) return false;//计算是否是未来的时间\n        if (_y == cur_y && _m > cur_m) return false;\n        if (_y == cur_y && _m == cur_m && _d > cur_d) return false;\n        //计算每月最大天数\n        let maxDay = 31;\n        if ([4, 6, 9, 11].indexOf(_m) > -1) {\n            maxDay = 30;\n        } else if (_m == 2) {//计算闰月\n            if (_y % 100 == 0) {\n                maxDay = _y % 400 == 0 ? 29 : 28;\n            } else {\n                maxDay = _y % 4 == 0 ? 29 : 28;\n            }\n        }\n        if (_d > maxDay || _d <= 0) return false;\n        return true;\n    }\n\n    /**获取类型是否异常\n    *@true 正常\n    *@false 异常\n    */\n    Get_Type_Is_Abnormal(Value: any): boolean {\n        // 检查 null 和 undefined\n        if (Value === null || Value === undefined) {\n            console.log(\"类型异常\");\n            return false;\n        }\n        // 检查 NaN\n        if (typeof Value === 'number' && isNaN(Value)) {\n            console.log(\"类型异常\");\n            return false;\n        }\n        // 检查空字符串、空对象和空数组\n        if (Value === \"\" || (typeof Value === 'object' && Object.keys(Value).length === 0)) {\n            console.log(\"类型异常\");\n            return false;\n        }\n        // 如果通过所有检查，返回 true，表示正常\n        return true;\n    }\n\n    /**获取闭区间[Min,Max]内的随机数*/\n    Get_Random_Int(Min: number, Max: number): number {\n        Min = Math.ceil(Min);\n        Max = Math.floor(Max);\n        return Math.floor(Math.random() * (Max - Min + 1)) + Min;\n    }\n    /** 获取闭区间 [Min, Max] 内的数组 Arr 外的随机数，如果不存在返回 -1；\n     * @param Min 最小数\n     * @param Max 最大数\n     * @param Arr 数组\n     * @example Get_Random_Int_Plus(0, 6, [1, 2, 3, 4]); // return 0/5/6\n     */\n    Get_Random_Int_Except(Min: number, Max: number, Arr: number[]): number {\n        // 将数组 Arr 转换为 Set，以便快速查找\n        //排除\n        const Numbers_Excluded = new Set(Arr);\n        //可用\n        const Numbers_Available: number[] = [];\n        // 收集可用的数字\n        for (let i = Min; i <= Max; i++) {\n            if (!Numbers_Excluded.has(i)) {\n                Numbers_Available.push(i);\n            }\n        }\n        // 如果没有可用的数字，返回 -1\n        if (Numbers_Available.length === 0) {\n            return -1;\n        } else {\n            // 获取随机索引并返回对应的随机数\n            const randomIndex = this.Get_Random_Int(0, Numbers_Available.length - 1);\n            return Numbers_Available[randomIndex];\n        }\n    }\n\n\n    /**\n     * 获取一组不重复的随机数\n     * @param Min 最小数（包含）\n     * @param Max 最大数（包含）\n     * @param Length 数组长度\n     * @returns 不重复的随机数数组\n     */\n    Get_Random_Arr_Deduplication(Min: number, Max: number, Length: number): number[] {\n        // 参数校验\n        if (Min > Max) {\n            console.debug(`Min:${Min} 必须小于或等于 Max:${Max}`);\n            return\n        }\n        // 计算范围\n        const Range = Max - Min + 1;\n        // 确保 Length 不超过范围\n        Length = Math.min(Length, Range);\n        // 动态选择实现方式\n        if (Range <= 1000 || Length <= Range * 0.1) {\n            // 小范围或 Length 远小于范围时，使用 Set + while 循环\n            return this.Get_Random_Arr_BySet(Min, Max, Length);\n        } else {\n            // 大范围且 Length 接近范围时，使用 Fisher-Yates 洗牌算法\n            return this.Get_Random_Arr_ByShuffle(Min, Max, Length);\n        }\n    }\n    /**\n    * 使用 Set + while 循环生成随机数\n    * @param Min 最小数\n    * @param Max 最大数\n    * @param Length 数组长度\n    * @returns 不重复的随机数数组\n    */\n    Get_Random_Arr_BySet(Min: number, Max: number, Length: number): number[] {\n        const Result: Set<number> = new Set(); // 使用 Set 来避免重复\n        while (Result.size < Length) {\n            const Num_Random = this.Get_Random_Int(Min, Max);\n            Result.add(Num_Random); // Set 会自动处理重复\n        }\n        return Array.from(Result); // 将 Set 转换为数组\n    }\n    /**\n     * 使用 Fisher-Yates 洗牌算法生成随机数\n     * @param Min 最小数\n     * @param Max 最大数\n     * @param Length 数组长度\n     * @returns 不重复的随机数数组\n     */\n    Get_Random_Arr_ByShuffle(Min: number, Max: number, Length: number): number[] {\n        const All_Numbers = Array.from({ length: Max - Min + 1 }, (_, i) => i + Min);\n        this.Sort_Random(All_Numbers);\n        // 返回前 len 个元素\n        return All_Numbers.slice(0, Length);\n    }\n\n    /**排序反向 */\n    Sort_Reverse<T>(Arr: T[]): T[] {\n        return Arr.reverse();\n    }\n    /**排序随机 (Fisher-Yates 洗牌算法) */\n    Sort_Random<T>(Arr: T[]): T[] {\n        for (let i = Arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [Arr[i], Arr[j]] = [Arr[j], Arr[i]];\n        }\n        return Arr;\n    }\n    /** 排序升序 */\n    Sort_Ascending<T extends number>(Arr: T[]): T[] {\n        return Arr.sort((a, b) => a - b);\n    }\n    /** 降序排序 */\n    Sort_Descending<T extends number>(Arr: T[]): T[] {\n        return Arr.sort((a, b) => b - a);\n    }\n    /** 按字符串长度排序 */\n    Sort_ByStringLength<T extends string>(Arr: T[]): T[] {\n        return Arr.sort((a, b) => a.length - b.length);\n    }\n    /** 按对象属性排序 */\n    // Sort_ByObjectProperty<T extends Record<string, any>>(Arr: T[], Key: keyof T, Reverse: boolean = false): T[] {\n    //     return Arr.sort((a, b) => a[Key] - b[Key]);\n    // }\n\n\n    /**\n     * 按对象属性排序\n     * @param Arr 要排序的数组\n     * @param Key 排序依据的属性名\n     * @param Reverse 是否降序排列（默认false为升序）\n     * @returns 排序后的新数组\n     */\n    Sort_ByObjectProperty<T extends Record<string, any>>(\n        Arr: T[],\n        Key: keyof T,\n        Reverse: boolean = false\n    ): T[] {\n        return Arr.sort((a, b) => {\n            const valueA = a[Key];\n            const valueB = b[Key];\n            // 处理可能的undefined/null值\n            if (valueA == null) return Reverse ? -1 : 1;\n            if (valueB == null) return Reverse ? 1 : -1;\n            // 数值比较\n            if (typeof valueA === 'number' && typeof valueB === 'number') {\n                return Reverse ? valueB - valueA : valueA - valueB;\n            }\n            // 字符串比较\n            const strA = String(valueA);\n            const strB = String(valueB);\n            return Reverse\n                ? strB.localeCompare(strA)\n                : strA.localeCompare(strB);\n        });\n    }\n\n\n\n    /** 按字母顺序排序 */\n    Sort_Alphabetically<T extends string>(Arr: T[]): T[] {\n        return Arr.sort((a, b) => a.localeCompare(b));\n    }\n    /** 按日期排序 */\n    Sort_ByDate<T extends string | Date>(Arr: T[]): T[] {\n        return Arr.sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n    }\n    /** 计算数组的平均值 */\n    Get_Array_Average(Arr: number[]): number {\n        const Sum = Arr.reduce((acc, val) => acc + val, 0);\n        return Sum / Arr.length;\n    }\n\n\n    /**\n     * 从数组中提取所有奇数\n     * @param Arr 输入数组\n     * @returns 包含所有奇数的新数组\n     */\n    Get_Numbers_Odd(Arr: number[]): number[] {\n        if (!Arr || Arr.length === 0) {\n            return []; // 如果数组为空或未定义，直接返回空数组\n        }\n        return Arr.filter(num => num % 2 !== 0); // 过滤出奇数\n    }\n    /**\n     * 从数组中提取所有偶数\n     * @param Arr 输入数组\n     * @returns 包含所有偶数的新数组\n     */\n    Get_Numbers_Even(Arr: number[]): number[] {\n        if (!Arr || Arr.length === 0) {\n            return []; // 如果数组为空或未定义，直接返回空数组\n        }\n        return Arr.filter(num => num % 2 === 0); // 过滤出偶数\n    }\n\n    /** 获取 数组 去重 */\n    Get_Arr_Unique<T>(Arr: T[]): T[] {\n        return Array.from(new Set(Arr));\n    }\n    /** 获取 数组 合并 去重 */\n    Get_Arr_Merge_Unique<T>(Arr1: T[], Arr2: T[]): T[] {\n        return Array.from(new Set([...Arr1, ...Arr2]));\n    }\n\n    /** 获取 数组 中 每个元素 的 出现频率 */\n    Get_Arr_Element_Frequency<T extends string | number | symbol>(Arr: T[]): Record<T, number> {\n        const frequency: Record<string, number> = {}; // 使用 string 作为键的对象\n        for (const item of Arr) {\n            frequency[item as string] = (frequency[item as string] || 0) + 1; // 强制转换为 string\n        }\n        return frequency as Record<T, number>; // 最后转换回 Record<T, number>\n    }\n\n    /** 获取 数组 中 最大值 和 最小值。如果 数组 为空 返回 null */\n    Get_Arr_Min_And_Max(Arr: number[]): { min: number; max: number } | null {\n        if (Arr.length === 0) return null;\n        return {\n            min: Math.min(...Arr),\n            max: Math.max(...Arr),\n        };\n    }\n\n    /** 获取 数组 中 目标值 的 索引，如果 没有 找到 任何 匹配 的 索引 返回 -1 */\n    Get_Arr_Target_Index(Arr: number[], Target: number): number[] | number {\n        const Arr_Index: number[] = [];\n        for (let i = 0; i < Arr.length; i++) {\n            if (Arr[i] === Target) {\n                Arr_Index.push(i);\n            }\n        }\n        return Arr_Index.length > 0 ? Arr_Index : -1;\n    }\n    /** 返回数组中最接近目标数字的值 */\n    Get_Arr_Closest_Number(Arr: number[], Target: number): number {\n        if (Arr.length === 0) {\n            throw new Error(\"数组不能为空\");\n        }\n        // 使用 reduce 方法找到最接近的数字\n        return Arr.reduce((Closest, Current) => {\n            // 计算当前数字与目标数字的差值\n            const CurrentDiff = Math.abs(Current - Target);\n            const ClosestDiff = Math.abs(Closest - Target);\n            // 如果当前数字更接近目标，则更新 closest\n            return CurrentDiff < ClosestDiff ? Current : Closest;\n        });\n    }\n\n    /** 获取随机坐标 (X, Y) */\n    Get_Random_Pos(Min_X: number, Max_X: number, Min_Y: number, Max_Y: number): Vec3 {\n        const Pos_X = this.Get_Random_Int(Min_X, Max_X);\n        const Pos_Y = this.Get_Random_Int(Min_Y, Max_Y);\n        return v3(Pos_X, Pos_Y, 0);\n    }\n\n    /**\n     * 获取不重复的随机坐标数组\n     * @param Leng 需要生成的坐标数量\n     * @param Min_X X轴最小值\n     * @param Max_X X轴最大值\n     * @param Min_Y Y轴最小值\n     * @param Max_Y Y轴最大值\n     * @param MinDistance 坐标之间的最小间隔距离（默认100）\n     * @returns 不重复的坐标数组\n     */\n    public Get_Random_Pos_Arr(\n        Leng: number,\n        Min_X: number,\n        Max_X: number,\n        Min_Y: number,\n        Max_Y: number,\n        MinDistance: number = 100\n    ): Vec3[] {\n        const Pos_Arr: Vec3[] = [];\n        let MaxAttempts = 1000; // 防止无限循环的安全阀\n        while (Pos_Arr.length < Leng && MaxAttempts-- > 0) {\n            const Pos = this.Get_Random_Pos(Min_X, Max_X, Min_Y, Max_Y);\n            // 检查新坐标与现有坐标的最小距离\n            const isTooClose = Pos_Arr.some(Existing => {\n                return Pos.clone().subtract(Existing).length() < MinDistance;\n            });\n\n            // 如果坐标有效（不与其他坐标太近），则加入数组\n            if (!isTooClose) {\n                Pos_Arr.push(Pos);\n            }\n            // 如果无效，直接跳过，继续循环生成新坐标\n        }\n        if (MaxAttempts <= 0) {\n            console.warn(`无法在 ${MaxAttempts} 次尝试内生成所有不重复坐标，可能空间不足或间隔要求过高`);\n        }\n        return Pos_Arr;\n    }\n\n\n\n\n    /**秒数转时间字符串 */\n    Seconds_To_Time_String(Seconds: number): string {\n        const Hours = Math.floor(Seconds / 3600);\n        const Minutes = Math.floor((Seconds % 3600) / 60);\n        const Secs = Seconds % 60;\n        // 手动格式化为两位数\n        let FormattedHours = (Hours < 10 ? '0' : '') + Hours + \":\";\n        if (Hours == 0) {\n            FormattedHours = \"\";\n        }\n        let FormattedMinutes = (Minutes < 10 ? '0' : '') + Minutes + \":\";\n        let FormattedSeconds = (Secs < 10 ? '0' : '') + Secs;\n        return `${FormattedHours}${FormattedMinutes}${FormattedSeconds}`;\n    }\n\n    /**打印当前时间的函数 */\n    printCurrentTime() {\n        const now = new Date(); // 获取当前时间\n        const formattedTime = now.toLocaleString(); // 格式化时间\n        console.log(\"当前时间: \" + formattedTime); // 打印时间\n    }\n\n\n\n    /**消消乐 消除\n     * @Rows 行数\n     * @Cols 列数\n     */\n    XXL_Des(Rows: number, Cols: number, Grid: number[]): number[] {\n        let Result: number[] = [];\n        // 检查横向相邻元素\n        for (let i = 0; i < Rows; i++) {\n            for (let j = 0; j < Cols - 2; j++) {\n                const Index_1 = i * Cols + j;\n                const Index_2 = i * Cols + j + 1;\n                const Index_3 = i * Cols + j + 2;\n                if (Grid[Index_1] === Grid[Index_2] && Grid[Index_2] === Grid[Index_3]) {\n                    Result.push(Index_1, Index_2, Index_3);\n                }\n            }\n        }\n        // 检查纵向相邻元素\n        for (let j = 0; j < Cols; j++) {\n            for (let i = 0; i < Rows - 2; i++) {\n                const Index_1 = i * Cols + j;\n                const Index_2 = (i + 1) * Cols + j;\n                const Index_3 = (i + 2) * Cols + j;\n                if (Grid[Index_1] === Grid[Index_2] && Grid[Index_2] === Grid[Index_3]) {\n                    Result.push(Index_1, Index_2, Index_3);\n                }\n            }\n        }\n        Result = this.Get_Arr_Unique(Result);\n        return Result;\n    }\n    /**消消乐 掉落\n     * @Rows 行数\n     * @Cols 列数\n     * @returns [掉落前索引,掉落后索引]\n     */\n    XXL_Fall(Rows: number, Cols: number, Grid: number[]): { Index_Start: number, Index_End: number }[] {\n        if (Grid.length !== Rows * Cols) {\n            throw new Error(`Grid must have exactly ${Rows * Cols} elements`);\n        }\n        const Result: { Index_Start: number, Index_End: number }[] = [];\n        // 从下往上遍历每一列\n        for (let j = 0; j < Cols; j++) {\n            let Write_Pointer = Rows - 1; // 从最底部开始写入\n            // 从下往上遍历每一行\n            for (let i = Rows - 1; i >= 0; i--) {\n                const Index_Start = i * Cols + j;\n                // 如果当前元素不是空格子，将其移动到 Write_Pointer 的位置\n                if (Grid[Index_Start] !== -1) {\n                    const Index_End = Write_Pointer * Cols + j;\n                    // 如果起始位置和目标位置不同，记录移动\n                    if (Index_Start !== Index_End) {\n                        Result.push({ Index_Start, Index_End });\n                    }\n                    Write_Pointer--; // 更新写入位置\n                }\n            }\n        }\n        return Result;\n    }\n\n\n\n}\n\n\n"]}