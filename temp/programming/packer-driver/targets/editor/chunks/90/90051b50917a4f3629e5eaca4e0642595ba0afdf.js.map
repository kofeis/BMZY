{"version":3,"sources":["file:///D:/Cocos/XHAT/BMZY/assets/Script/Tool/Tool_Type.ts"],"names":["_decorator","Component","ccclass","property","Tool_Type","Is_Abnormal","Value","console","debug","isNaN","trim","Array","isArray","length","Object","keys","Get_Detail_Type","undefined","Map","Set","Date","RegExp","Get_Empty_Array","Get_Empty_Object","Get_Empty_Function","Get_Empty_Map","Get_Empty_Set","Is_Number","Is_String","Is_Boolean","Is_Function","Is_Array","Is_Plain_Object","prototype","toString","call","Is_Nil","Is_Promise","then","Is_Date","Is_Reg_Exp","Is_Empty_Object","Is_Empty_Array","Is_JSON_String","Obj","JSON","parse","To_Number","Default_Value","N","Number","To_Boolean","toLowerCase","Boolean","To_String","String","Get_Type","Has_Own","Object_Value","Key","hasOwnProperty","Is_Instance_Of","Constructor","instance"],"mappings":"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","sourcesContent":["import { _decorator, Component, v3, Vec3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Tool_Type')\nexport class Tool_Type extends Component {\n\n    public static readonly instance = new Tool_Type();\n\n    /**\n     * 判断值类型是否异常\n     * @param Value 任意值\n     * @returns true 正常，false 异常\n     * @example\n     * Tool_Type.instance.Get_Type_Is_Abnormal(null); // false\n     * Tool_Type.instance.Get_Type_Is_Abnormal(\"T\"); // true\n     */\n    Is_Abnormal(Value: any): boolean {\n        // null、undefined、NaN\n        if (Value == null) {\n            console.debug(\"类型异常: 值为null或undefined\");\n            return false;\n        }\n        if (typeof Value === 'number' && isNaN(Value)) {\n            console.debug(\"类型异常: 值为NaN\");\n            return false;\n        }\n        // 空字符串\n        if (typeof Value === 'string' && Value.trim() === \"\") {\n            console.debug(\"类型异常: 空字符串\");\n            return false;\n        }\n        // 空数组\n        if (Array.isArray(Value) && Value.length === 0) {\n            console.debug(\"类型异常: 空数组\");\n            return false;\n        }\n        // 空对象（非数组、非null）\n        if (typeof Value === 'object' && !Array.isArray(Value) && Object.keys(Value).length === 0) {\n            console.debug(\"类型异常: 空对象\");\n            return false;\n        }\n        // 其他类型（如函数、布尔值、非空对象/数组/字符串/数字）视为正常\n        return true;\n    }\n\n    /**\n     * 获取变量详细类型字符串（支持 array、function、map、set、date、regexp、symbol、bigint、null、undefined 等）\n     * @param Value 任意值\n     * @returns string\n     * @example\n     * Tool_Type.Get_Detail_Type([]); // \"array\"\n     * Tool_Type.Get_Detail_Type(new Map()); // \"map\"\n     * Tool_Type.Get_Detail_Type(() => {}); // \"function\"\n     * Tool_Type.Get_Detail_Type(null); // \"null\"\n     * Tool_Type.Get_Detail_Type(undefined); // \"undefined\"\n     * Tool_Type.Get_Detail_Type(123); // \"number\"\n     */\n    public static Get_Detail_Type(Value: any): string {\n        if (Value === null) return 'null';\n        if (Value === undefined) return 'undefined';\n        if (Array.isArray(Value)) return 'array';\n        if (Value instanceof Map) return 'map';\n        if (Value instanceof Set) return 'set';\n        if (Value instanceof Date) return 'date';\n        if (Value instanceof RegExp) return 'regexp';\n        if (typeof Value === 'function') return 'function';\n        if (typeof Value === 'symbol') return 'symbol';\n        if (typeof Value === 'bigint') return 'bigint';\n        return typeof Value;\n    }\n\n    /**\n     * 获取一个空数组实例\n     * @returns []\n     */\n    public static Get_Empty_Array(): any[] {\n        return [];\n    }\n\n    /**\n     * 获取一个空对象实例\n     * @returns {}\n     */\n    public static Get_Empty_Object(): object {\n        return {};\n    }\n\n    /**\n     * 获取一个空函数实例\n     * @returns () => void\n     */\n    public static Get_Empty_Function(): () => void {\n        return () => { };\n    }\n\n    /**\n     * 获取一个空 Map 实例\n     * @returns Map<any, any>\n     */\n    public static Get_Empty_Map(): Map<any, any> {\n        return new Map();\n    }\n\n    /**\n     * 获取一个空 Set 实例\n     * @returns Set<any>\n     */\n    public static Get_Empty_Set(): Set<any> {\n        return new Set();\n    }\n\n    /**\n     * 判断是否为数字（不包含NaN）\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Number(123); // true\n     * Tool_Type.Is_Number(\"123\"); // false\n     */\n    public static Is_Number(Value: any): boolean {\n        return typeof Value === 'number' && !isNaN(Value);\n    }\n\n    /**\n     * 判断是否为字符串\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_String(\"abc\"); // true\n     * Tool_Type.Is_String(123); // false\n     */\n    public static Is_String(Value: any): boolean {\n        return typeof Value === 'string';\n    }\n\n    /**\n     * 判断是否为布尔值\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Boolean(true); // true\n     * Tool_Type.Is_Boolean(\"true\"); // false\n     */\n    public static Is_Boolean(Value: any): boolean {\n        return typeof Value === 'boolean';\n    }\n\n    /**\n     * 判断是否为函数\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Function(() => {}); // true\n     * Tool_Type.Is_Function(\"T\"); // false\n     */\n    public static Is_Function(Value: any): boolean {\n        return typeof Value === 'function';\n    }\n\n    /**\n     * 判断是否为数组\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Array([1,2,3]); // true\n     * Tool_Type.Is_Array(\"123\"); // false\n     */\n    public static Is_Array(Value: any): boolean {\n        return Array.isArray(Value);\n    }\n\n    /**\n     * 判断是否为纯对象（不包括数组和null）\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Plain_Object({a:1}); // true\n     * Tool_Type.Is_Plain_Object([1,2]); // false\n     */\n    public static Is_Plain_Object(Value: any): boolean {\n        return Object.prototype.toString.call(Value) === '[object Object]';\n    }\n\n    /**\n     * 判断是否为null或undefined\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Nil(null); // true\n     * Tool_Type.Is_Nil(undefined); // true\n     * Tool_Type.Is_Nil(0); // false\n     */\n    public static Is_Nil(Value: any): boolean {\n        return Value === null || Value === undefined;\n    }\n\n    /**\n     * 判断是否为Promise\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Promise(Promise.resolve()); // true\n     * Tool_Type.Is_Promise({}); // false\n     */\n    public static Is_Promise(Value: any): boolean {\n        return !!Value && (typeof Value === 'object' || typeof Value === 'function') && typeof Value.then === 'function';\n    }\n\n    /**\n     * 判断是否为日期对象\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Date(new Date()); // true\n     * Tool_Type.Is_Date(\"2024-01-01\"); // false\n     */\n    public static Is_Date(Value: any): boolean {\n        return Object.prototype.toString.call(Value) === '[object Date]';\n    }\n\n    /**\n     * 判断是否为正则表达式\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Reg_Exp(/T/); // true\n     * Tool_Type.Is_Reg_Exp(\"T\"); // false\n     */\n    public static Is_Reg_Exp(Value: any): boolean {\n        return Object.prototype.toString.call(Value) === '[object RegExp]';\n    }\n\n    /**\n     * 判断是否为空对象\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Empty_Object({}); // true\n     * Tool_Type.Is_Empty_Object({T:0}); // false\n     */\n    public static Is_Empty_Object(Value: any): boolean {\n        return this.Is_Plain_Object(Value) && Object.keys(Value).length === 0;\n    }\n\n    /**\n     * 判断是否为空数组\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_Empty_Array([]); // true\n     * Tool_Type.Is_Empty_Array([0]); // false\n     */\n    public static Is_Empty_Array(Value: any): boolean {\n        return Array.isArray(Value) && Value.length === 0;\n    }\n\n    /**\n     * 判断是否为有效JSON字符串\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.Is_JSON_String('{\"T\":0}'); // true\n     * Tool_Type.Is_JSON_String('T'); // false\n     */\n    public static Is_JSON_String(Value: any): boolean {\n        if (typeof Value !== 'string') return false;\n        try {\n            const Obj = JSON.parse(Value);\n            return typeof Obj === 'object' && Obj !== null;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * 类型安全转换为数字，失败返回默认值\n     * @param Value 任意值\n     * @param Default_Value 转换失败时返回的默认值，默认0\n     * @returns number\n     * @example\n     * Tool_Type.To_Number(\"0\"); // 0\n     * Tool_Type.To_Number(\"T\", 8); // 8\n     */\n    public static To_Number(Value: any, Default_Value: number = 0): number {\n        const N = Number(Value);\n        return isNaN(N) ? Default_Value : N;\n    }\n\n    /**\n     * 类型安全转换为布尔值\n     * @param Value 任意值\n     * @returns boolean\n     * @example\n     * Tool_Type.To_Boolean(\"true\"); // true\n     * Tool_Type.To_Boolean(0); // false\n     */\n    public static To_Boolean(Value: any): boolean {\n        if (typeof Value === 'string') {\n            return Value.toLowerCase() === 'true' || Value === '1';\n        }\n        return Boolean(Value);\n    }\n\n    /**\n     * 类型安全转换为字符串\n     * @param Value 任意值\n     * @param Default_Value 转换失败时返回的默认值，默认''\n     * @returns string\n     * @example\n     * Tool_Type.To_String(0); // \"0\"\n     * Tool_Type.To_String(null, \"default\"); // \"default\"\n     */\n    public static To_String(Value: any, Default_Value: string = ''): string {\n        if (Value == null) return Default_Value;\n        return String(Value);\n    }\n\n    /**\n     * 获取变量类型字符串（更详细）\n     * @param Value 任意值\n     * @returns string\n     * @example\n     * Tool_Type.Get_Type([]); // \"array\"\n     * Tool_Type.Get_Type(null); // \"null\"\n     * Tool_Type.Get_Type(123); // \"number\"\n     */\n    public static Get_Type(Value: any): string {\n        if (Value === null) return 'null';\n        if (Array.isArray(Value)) return 'array';\n        return typeof Value;\n    }\n\n    /**\n     * 安全地检查对象是否拥有指定的自身属性（非继承属性）\n     * @param Object_Value - 要检查的目标对象\n     * @param Key - 要检查的属性名\n     * @returns 如果对象自身包含该属性则返回 true，否则返回 false\n     * \n     * @example\n     * const obj = { name: 'Alice' };\n     * \n     * // 检查自身属性\n     * Has_Own(obj, 'name');  // true\n     * \n     * // 检查继承属性\n     * Has_Own(obj, 'toString');  // false\n     * \n     * // 检查不存在的属性\n     * Has_Own(obj, 'age');  // false\n     */\n    public static Has_Own(Object_Value: object, Key: string): boolean {\n        return Object.prototype.hasOwnProperty.call(Object_Value, Key);\n    }\n\n    /**\n     * 检查对象是否为某个构造函数的实例\n     * @param Object_Value - 要检查的目标对象\n     * @param Constructor - 用于检查的构造函数\n     * @returns 如果对象是该构造函数的实例则返回 true，否则返回 false\n     * \n     * @example\n     * class Person {}\n     * const P = new Person();\n     * \n     * // 检查实例关系\n     * Is_Instance_Of(p, Person);  // true\n     * \n     * // 检查数组\n     * Is_Instance_Of([], Array);  // true\n     * \n     * // 检查原生对象\n     * Is_Instance_Of({}, Object);  // true\n     */\n    public static Is_Instance_Of(Object_Value: any, Constructor: Function): boolean {\n        // instanceof 操作符会检查对象的原型链\n        return Object_Value instanceof Constructor;\n    }\n\n\n}\n\n\n"]}