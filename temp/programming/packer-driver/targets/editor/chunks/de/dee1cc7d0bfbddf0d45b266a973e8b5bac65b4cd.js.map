{"version":3,"sources":["file:///D:/CYDW/WoChengYuTeNiu/assets/Script/Other/folder/WechatManager.ts"],"names":["WechatManager","_decorator","ccclass","property","_userInfo","_avatarCallBack","instance","_instance","initAutoSetting","callBack","wx","window","object","success","res","autoSetting","authSetting","getUserInfo","creatUserInfoButton","fail","console","log","complete","getSetting","isFull","type","text","style","left","top","width","height","backgroundColor","color","textAlign","lineHeight","fontSize","button","createUserInfoButton","onTap","userInfo","avatarUrl","destroy"],"mappings":"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","sourcesContent":["// wxAPI: https://developers.weixin.qq.com/minigame/dev/api/\r\nimport { _decorator, screen} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport class WechatManager {\r\n  private static _instance: WechatManager = null;  \r\n  // 用户信息: 昵称，头像,语言等\r\n  private _userInfo;\r\n  // 头像回调\r\n  private _avatarCallBack = null;\r\n\r\n  static get instance() {\r\n    if (this._instance) {\r\n      return this._instance;\r\n    }\r\n    this._instance = new WechatManager();\r\n    return this._instance;\r\n  }\r\n\r\n  // 获取标记权限\r\n  public initAutoSetting(callBack) {\r\n    this._avatarCallBack = callBack;\r\n    // 避开ts语法检测\r\n    const wx = window['wx'];\r\n    // 获取请求过的权限标记\r\n    let object: any = {\r\n      // 成功回调         \r\n      success: (res) => {\r\n        // 是否授权用户信息\r\n        const autoSetting = res.authSetting;\r\n        if (autoSetting[\"scope.userInfo\"]) {\r\n          // 已授权\r\n          this.getUserInfo();\r\n        } else {\r\n          // 未授权\r\n          this.creatUserInfoButton();\r\n        }\r\n      },\r\n      // 失败回调\r\n      fail() {\r\n        console.log(\"wx.getSetting获取用户配置失败\");\r\n      },\r\n      // 结束回调(调用成功，失败都会执行)\r\n      complete() {\r\n        console.log(\"wx.getSetting获取用户配置结束\");\r\n      }\r\n    }\r\n    wx.getSetting(object);\r\n  }\r\n\r\n  // 创建用户授权按钮(仅用于登录页面, 如果用户拒绝授权，则一直显示)\r\n  private creatUserInfoButton(isFull: boolean = false) {\r\n    const wx = window['wx'];\r\n    let object: any = {\r\n      // 按钮类型： text可设置背景色和文本 image仅能设置背景贴图\r\n      type: \"text\",\r\n      // 按钮文本，仅对type为text有效\r\n      text: \"授权\",\r\n      // 按钮样式\r\n      style: {\r\n        left: 70, \r\n        top: 60,\r\n        width: 100,\r\n        height: 40,\r\n        backgroundColor: \"#66CC00\",\r\n        color: \"#FFFFFF\",\r\n        textAlign: 'center',\r\n        lineHeight: 40,\r\n        fontSize: 20,\r\n      },\r\n    };\r\n\r\n    const button = wx.createUserInfoButton(object);\r\n    // 监听用户信息按钮点击事件\r\n    button.onTap((res) => {\r\n      if (res && res.userInfo) {\r\n        console.log(\"用户同意授权\");\r\n        this._userInfo = res.userInfo; \r\n        if (this._avatarCallBack) {\r\n          this._avatarCallBack(this._userInfo.avatarUrl);\r\n        }\r\n        // 授权成功后，才销毁按钮\r\n        button.destroy();\r\n      } else {\r\n        console.log(\"用户拒绝授权\");\r\n      }\r\n    });\r\n  }\r\n\r\n  // 获取用户信息，需要获取scope.userInfo的授权，也就是getSettings的接口调用\r\n  public getUserInfo() {\r\n    const wx = window['wx'];\r\n    let object: any = {\r\n      success: (res) => {\r\n        console.log(\"通过 getUserInfo 获取的数据:\", res);\r\n        if (res) {\r\n          this._userInfo = res.userInfo;\r\n          if (this._avatarCallBack) {\r\n            this._avatarCallBack(this._userInfo.avatarUrl);\r\n          }\r\n        } \r\n      },\r\n      fail: () => {\r\n        console.log(\"getUserInfo获取信息失败\");\r\n      },\r\n      complete: () => {},\r\n    };\r\n    wx.getUserInfo(object);\r\n  }\r\n}\r\n"]}