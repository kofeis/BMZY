{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/minigame3/Aby/assets/scripts/framework/manager/AudioManager.ts"],"names":["AudioManager","AudioClip","resManager","constructor","musicAudioSource","effectAudioSource","audioClips","musicVolume","effectVolume","musicName","instance","_instance","setMusicAudioSource","audioSource","setEffectAudioSource","initData","data","undefined","getSaveData","now","loadAudiosByPath","path","onProgress","onComplete","loadAssetByResoucesDir","percent","err","assetArr","i","asset","name","loadAudio","loadAsset","getMusiceVolume","setMusicVolume","val","Math","round","volume","pause","playMusic","clip","getAudioClip","playing","stop","loop","play","gameOnShow","force","console","info","state","getEffectVolume","setEffectVolume","playEffect","effectName","playOneShot","Promise","resolve","reject","audioManager"],"mappings":"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","sourcesContent":["import { AudioClip, AudioSource } from \"cc\";\nimport { resManager } from \"./ResManager\";\n\nclass AudioManager {\n\n    // 单例\n    private static _instance: AudioManager;\n    private constructor() {};\n    public static get instance(): AudioManager {\n        if (!this._instance) {\n            this._instance = new AudioManager();\n        }\n        return this._instance;\n    }\n\n    musicAudioSource: AudioSource;\n    effectAudioSource: AudioSource;\n\n    // 缓存clip\n    audioClips: any = {};\n\n    musicVolume: number = 1;\n    effectVolume: number = 1;\n    musicName: string = \"\";\n\n    setMusicAudioSource(audioSource: AudioSource) {\n        this.musicAudioSource = audioSource;\n    }\n\n    setEffectAudioSource(audioSource: AudioSource) {\n        this.effectAudioSource = audioSource;\n    }\n\n    initData(data: any) {\n        if (!data) {\n            data = {};\n        }\n\n        if (data.musicVolume != undefined) {\n            this.musicVolume = data.musicVolume;\n        }\n\n        if (data.effectVolume != undefined) {\n            this.effectVolume = data.effectVolume;\n        }\n    }\n\n    getSaveData(now: Date) {\n        let data: any = {};\n        data.musicVolume = this.musicVolume;\n        data.effectVolume = this.effectVolume;\n\n        return data;\n    }\n\n    loadAudiosByPath(path: string, onProgress?: Function, onComplete?: Function) {\n        resManager.loadAssetByResoucesDir(path, AudioClip, (percent: number) => {\n            if (onProgress) {\n                if (percent > 0.96) {\n                    // 解决提前回调百分百导致的音频资源还未缓存到audioClips\n                    percent = 0.96;\n                }\n                if (onProgress) {\n                    onProgress(percent);\n                }\n            }\n        }, (err, assetArr: any) => {\n            for (let i in assetArr) {\n                let asset = assetArr[i];\n                let name = asset.name;\n                if (!name) {\n                    continue;\n                }\n                this.audioClips[name] = asset;\n            }\n            if (onComplete) {\n                onComplete();\n            }\n        });\n    }\n\n    loadAudio(path: string, onComplete?: Function) {\n        resManager.loadAsset(\"audio\", path, AudioClip, null, (err: any, asset: AudioClip) => {\n            if (err) {\n                if (onComplete) {\n                    onComplete();\n                }\n                return;\n            }\n            this.audioClips[asset.name] = asset;\n            if (onComplete) {\n                onComplete(asset);\n            }\n        });\n    }\n\n    getMusiceVolume(): number {\n        return this.musicVolume;\n    }\n\n    setMusicVolume(val: number) {\n        val = Math.round(val * 1000) / 1000;\n        this.musicVolume = val;\n        this.musicAudioSource.volume = val;\n\n        if (val <= 0) {\n            this.musicAudioSource.pause();\n            return;\n        }\n        this.playMusic(this.musicName);\n    }\n\n    async playMusic(musicName: string) {\n        if (!musicName) {\n            return;\n        }\n        this.musicName = musicName;\n        if (this.musicVolume <= 0) {\n            return;\n        }\n        let clip: any = await this.getAudioClip(musicName);\n        if (!clip) {\n            return;\n        }\n        if (this.musicAudioSource.playing) {\n            if (this.musicAudioSource.clip == clip) {\n                return;\n            }\n            this.musicAudioSource.stop();\n        }\n        this.musicAudioSource.clip = clip;\n        this.musicAudioSource.loop = true;\n        this.musicAudioSource.play();\n    }\n\n    // 游戏进入前台运行时判断是否需要播放音乐\n    gameOnShow(force: boolean = false) {\n        if (!this.musicAudioSource || this.musicVolume <= 0) {\n            return;\n        }\n        console.info(\"gameOnShow:\", this.musicAudioSource.playing, this.musicAudioSource.state);\n        if (!this.musicAudioSource.playing || force) {\n            this.musicAudioSource.play();\n        }\n    }\n\n    getEffectVolume(): number {\n        return this.effectVolume;\n    }\n\n    setEffectVolume(val: number) {\n        val = Math.round(val * 1000) / 1000;\n        this.effectVolume = val;\n        this.effectAudioSource.volume = val;\n    }\n    \n    async playEffect(effectName: string) {\n        if (!effectName || this.effectVolume <= 0) {\n            return;\n        }\n        let clip: any = await this.getAudioClip(effectName);\n        if (!clip) {\n            return;\n        }\n        this.effectAudioSource.playOneShot(clip);\n    }\n\n    getAudioClip(name: string) {\n        return new Promise((resolve, reject) => {\n            let clip = this.audioClips[name];\n            if (clip) {\n                resolve(clip);\n                return;\n            }\n            this.loadAudio(name, (clip: AudioClip) => {\n                resolve(clip);\n            });\n        });\n    }\n\n}\n\nexport const audioManager = AudioManager.instance;\n"]}