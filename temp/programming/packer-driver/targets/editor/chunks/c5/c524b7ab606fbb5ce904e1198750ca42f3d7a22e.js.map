{"version":3,"sources":["file:///D:/CYDW/WoChengYuTeNiu/assets/Script/Other/Debugger.ts"],"names":[],"mappingssourcesContent":["// /* eslint-disable no-console */\r\n\r\n// import { sys } from \"cc\";\r\n\r\n// /**\r\n//  * 日志打印\r\n//  */\r\n\r\n// const isDebug = true; // 打印开关，可以根据环境变量去配置\r\n// interface LogLevel {\r\n//     log: string;\r\n//     info: string;\r\n//     warn: string;\r\n//     error: string;\r\n// }\r\n// const logLevel: Array<keyof LogLevel> = [\"log\", \"info\", \"warn\", \"error\"];\r\n// const printColorDict: LogLevel = {\r\n//     // 打印的颜色\r\n//     log: \"#26a1f9\",\r\n//     info: \"#24ca39\",\r\n//     warn: \"#e4c52b\",\r\n//     error: \"#d21c1c\",\r\n// };\r\n\r\n// interface IDebugger {\r\n//     log: (...args: any[]) => void;\r\n//     info: (...args: any[]) => void;\r\n//     warn: (...args: any[]) => void;\r\n//     error: (...args: any[]) => void;\r\n// }\r\n\r\n// export default function Debugger(sign: string): IDebugger {\r\n//     const debug: IDebugger = {\r\n//         log: () => {},\r\n//         info: () => {},\r\n//         warn: () => {},\r\n//         error: () => {},\r\n//     };\r\n//     if (!isDebug) return debug;\r\n\r\n//     if (!sys.isNative) {\r\n//         return prepareConsoleLogger(sign);\r\n//     }\r\n\r\n//     return prepareNativeLogger(sign);\r\n// }\r\n\r\n// function prepareConsoleLogger(sign: string) {\r\n//     const debug: Partial<IDebugger> = {};\r\n//     logLevel.forEach((level) => {\r\n//         debug[level] = (...args: any[]) => {\r\n//             console.log(\r\n//                 `%c[${sign}]`,\r\n//                 `color:${printColorDict[level]}`,\r\n//                 ...args\r\n//             );\r\n//         };\r\n//     });\r\n//     return debug as IDebugger;\r\n// }\r\n\r\n// function prepareNativeLogger(sign: string) {\r\n//     const debug: Partial<IDebugger> = {};\r\n//     logLevel.forEach((level) => {\r\n//         debug[level] = (...args: any[]) => {\r\n//             try {\r\n//                 const content = JSON.stringify(args);\r\n//                 chunkString(content, 200).forEach((c) => {\r\n//                     console.log(`%c[${sign}]`, c);\r\n//                     if (enableWebsocket) {\r\n//                         getDefaultSocketLogger().log(sign, JSON.stringify(c));\r\n//                     }\r\n//                 });\r\n//             } catch (error) {\r\n//                 console.error(`%c[${sign}]`, \"打印内容包含复杂对象\");\r\n//             }\r\n//         };\r\n//     });\r\n//     return debug as IDebugger;\r\n// }\r\n\r\n// function chunkString(str: string, len: number) {\r\n//     const size = Math.ceil(str.length / len);\r\n//     const r: string[] = Array(size);\r\n//     let offset = 0;\r\n\r\n//     for (let i = 0; i < size; i++) {\r\n//         r[i] = str.substring(offset, offset + len);\r\n//         offset += len;\r\n//     }\r\n\r\n//     return r;\r\n// }\r\n\r\n// let wsReady: Promise<WebSocket> | null = null;\r\n// let enableWebsocket = false;\r\n// let _defaultSocketLogger: IDebugger | null = null;\r\n// function getDefaultSocketLogger() {\r\n//     if (!_defaultSocketLogger) {\r\n//         _defaultSocketLogger = SocketLogger();\r\n//     }\r\n//     return _defaultSocketLogger;\r\n// }\r\n\r\n// function SocketLogger() {\r\n//     const debug: Partial<IDebugger> = {};\r\n//     logLevel.forEach((level) => {\r\n//         debug[level] = async (sign: string, info: string) => {\r\n//             const ws: WebSocket | null = await wsReady;\r\n//             if (ws && ws.readyState === WebSocket.OPEN) {\r\n//                 ws.send(`[${sign}] ${level}: ${info}`);\r\n//             }\r\n//         };\r\n//     });\r\n//     return debug as IDebugger;\r\n// }\r\n// /**\r\n//  * 设置 WebSocket 地址并启用 SocketLogger `ws://ip:port`\r\n//  * 本地默认端口为 9596\r\n//  * @param uri\r\n//  */\r\n// // export async function setSocketLoggerURI(uri: string) {\r\n// //     if (!isProd()) {\r\n// //         enableWebsocket = true;\r\n// //         if (wsReady) {\r\n// //             const _ws = await wsReady;\r\n// //             if (_ws && _ws.readyState === WebSocket.OPEN) {\r\n// //                 _ws.close();\r\n// //             }\r\n// //         }\r\n// //         wsReady = new Promise((resolve) => {\r\n// //             const ws = new WebSocket(uri);\r\n// //             ws.onopen = (event) => {\r\n// //                 resolve(ws);\r\n// //             };\r\n// //             ws.onerror = () => {\r\n// //                 resolve(null);\r\n// //             };\r\n// //             ws.onclose = () => {};\r\n// //         });\r\n// //         await wsReady;\r\n// //     }\r\n// // }\r\n"]}