{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/minigame3/Aby/assets/scripts/framework/manager/LayerManager.ts"],"names":["LayerManager","Prefab","cocosUtil","resManager","constructor","layer","layerHint","openingLayerMap","Map","openedLayerMap","layerNameIdArrMap","layerId","layerPrefabs","instance","_instance","init","loadCommonLayers","bundleName","layerArr","onProgress","onComplete","loadAssetByPathArr","prefabArr","prefab","addRef","getPopLayerParentNode","addLayerNameId","name","id","arr","get","set","push","removeLayerNameId","length","index","indexOf","splice","openSingleLayer","layerName","obj","cb","openSuccessCb","idArr","openLayer","layerData","layerCb","onLoad","onEnable","layerParams","layerPath","loadAsset","err","console","error","message","node","instantiate","com","getComponent","addComponent","loadAssetConfigArr","preLoadAssetConfigArr","delete","parent","closeLayer","destroy","isShowingLayer","layerManager"],"mappings":"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","sourcesContent":["import { find, Node, Prefab } from \"cc\";\nimport { cocosUtil } from \"../utils/CocosUtil\";\nimport { BaseLayer } from \"../common/BaseLayer\";\nimport { resManager } from \"./ResManager\";\n\nclass LayerManager {\n\n    // 单例\n    private static _instance: LayerManager;\n    private constructor() {}\n    public static get instance(): LayerManager {\n        if (!this._instance) {\n            this._instance = new LayerManager();\n        }\n        return this._instance;\n    }\n\n    public layer: Node;\n    private layerHint: Node;\n\n    // 正在打开中的弹窗\n    private openingLayerMap: Map<number, any> = new Map();\n    // 已经打开的弹窗\n    private openedLayerMap: Map<number, BaseLayer> = new Map();\n    // 弹窗名称->弹窗id数组\n    private layerNameIdArrMap: Map<string, number[]> = new Map();\n\n    private layerId: number = 0;\n\n    // 缓存prefab\n    layerPrefabs: any = {};\n\n    init(layer: Node, layerHint: Node) {\n        this.layer = layer;\n        this.layerHint = layerHint;\n\n        this.openingLayerMap = new Map();\n        this.openedLayerMap = new Map();\n        this.layerNameIdArrMap = new Map();\n        this.layerId = 0;\n\n    }\n\n    loadCommonLayers(bundleName: string, layerArr: string[], onProgress?: Function, onComplete?: Function) {\n        resManager.loadAssetByPathArr(bundleName, layerArr, Prefab, onProgress, (prefabArr: any) => {\n            for (let prefab of prefabArr) {\n                prefab.addRef();\n            }\n            if (onComplete) {\n                onComplete(prefabArr);\n            }\n        });\n    }\n\n    getPopLayerParentNode(): Node {\n        return this.layer;\n    }\n\n    // 显示一条提示信息\n    // createNotice(content: any) {\n    //     let noticeLayer = find(constants.layers.NoticeLayer, this.layerHint);\n    //     if (noticeLayer) {\n    //         noticeLayer.getComponent(constants.layers.NoticeLayer)[\"createNotice\"](content);\n    //     }\n    // }\n\n    addLayerNameId(name: string, id: number) {\n        let arr = this.layerNameIdArrMap.get(name);\n        if (!arr) {\n            arr = [];\n            this.layerNameIdArrMap.set(name, arr);\n        }\n        arr.push(id);\n    }\n\n    removeLayerNameId(name: string, id: number) {\n        let arr = this.layerNameIdArrMap.get(name);\n        if (arr && arr.length > 0) {\n            let index = arr.indexOf(id);\n            if (index != -1) {\n                arr.splice(index, 1);\n            }\n        }\n    }\n\n    openSingleLayer(layerName: string, obj?: any, cb?: Function, openSuccessCb?: Function) {\n        if (!obj) {\n            obj = {};\n        }\n        let idArr = this.layerNameIdArrMap.get(layerName);\n        if (!idArr || idArr.length <= 0) {\n            this.openLayer(layerName, obj, cb, openSuccessCb);\n            return;\n        }\n\n        let id = idArr[0];\n        let layer = this.openedLayerMap.get(id);\n        if (layer) {\n            // 已显示，刷新数据\n            layer.layerData = obj;\n            layer.layerCb = cb;\n\n            layer.onLoad();\n            layer.onEnable();\n\n            if (openSuccessCb) {\n                openSuccessCb(layer);\n            }\n            return;\n        }\n\n        let layerParams = this.openingLayerMap.get(id);\n        if (layerParams) {\n            // 正准备显示，更新数据\n            layerParams.layerName = layerName;\n            layerParams.obj = obj;\n            layerParams.cb = cb;\n            layerParams.openSuccessCb = openSuccessCb;\n        }\n    }\n\n    openLayer(layerName: string, obj?: any, cb?: Function, openSuccessCb?: Function) {\n        if (!obj) {\n            obj = {};\n        }\n\n        this.layerId++;\n        let layerId = this.layerId;\n\n        let layerParams: any = {};\n        layerParams.layerName = layerName;\n        layerParams.obj = obj;\n        layerParams.cb = cb;\n        layerParams.openSuccessCb = openSuccessCb;\n        this.openingLayerMap.set(layerId, layerParams);\n\n        this.addLayerNameId(layerName, layerId);\n\n        // let bundleName = constants.bundles.layer;\n        let bundleName = \"layer\";\n        let layerPath = layerName;\n        resManager.loadAsset(bundleName, layerPath, Prefab, null, (err, prefab) => {\n            if (err) {\n                console.error(\"LayerManager.openLayer error:\" + err.message, layerName, err);\n                return;\n            }\n            layerParams = this.openingLayerMap.get(layerId);\n            if (!layerParams) {\n                // 在打开之前，就已经被关闭了\n                return;\n            }\n\n            let node = cocosUtil.instantiate(prefab);\n            let com = node.getComponent(layerName) || node.addComponent(layerName);\n\n            // 加载每个layer特定需要的资源\n            resManager.loadAssetConfigArr(com.preLoadAssetConfigArr, false, null, () => {\n                com.layerData = layerParams.obj;\n                com.layerCb = layerParams.cb;\n                com.layerName = layerParams.layerName;\n                com.layerId = layerId;\n\n                this.openingLayerMap.delete(layerId);\n                this.openedLayerMap.set(layerId, com);\n\n                // 添加到节点上后，会马上触发onLoad和onEnable回调，而start方法是在首次执行update之前被调用\n                node.parent = this.layer;\n\n                if (layerParams.openSuccessCb) {\n                    layerParams.openSuccessCb(com, prefab);\n                }\n            });\n\n        });\n    }\n\n    closeLayer(layerId: number | string) {\n        if (typeof (layerId) == \"string\") {\n            let idArr = this.layerNameIdArrMap.get(layerId);\n            if (!idArr || idArr.length <= 0) {\n                return;\n            }\n            layerId = idArr[idArr.length - 1];\n        }\n\n        let layer = this.openedLayerMap.get(layerId);\n        if (layer) {\n            layer.node.destroy();\n            this.openedLayerMap.delete(layerId);\n            this.removeLayerNameId(layer.layerName, layerId);\n        }\n\n        let layerParams = this.openingLayerMap.get(layerId);\n        if (layerParams) {\n            this.openingLayerMap.delete(layerId);\n            this.removeLayerNameId(layerParams.layerName, layerId);\n        }\n    }\n\n    isShowingLayer(layerName: string) {\n        let idArr = this.layerNameIdArrMap.get(layerName);\n        if (!idArr || idArr.length <= 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n}\n\nexport const layerManager = LayerManager.instance;\n"]}