{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/minigame3/Aby/assets/scripts/framework/manager/ResManager.ts"],"names":["ResManager","ResLoader","AssetConfig","assetManager","sp","SpriteFrame","Texture2D","resources","constructor","instance","_instance","loadAsset","bundleName","path","assetType","onProgress","onComplete","bundle","getBundle","get","loadAssetFunc","load","finish","total","err","asset","console","error","message","loadBundle","retBundle","loadAssetByPathArr","pathArr","length","lastPercent","onePercent","assetPercents","Map","count","arr","i","p","set","percent","forEach","push","loadAssetByBundleDir","dir","loadDir","item","assetArr","loadBundleArr","nameArr","log","releaseAsset","loadAssetConfigArr","assetConfigArr","isAddRef","index","loadedAssetArr","tmpFunc","type","loadedAsset","addRef","loadSpriteFrame","cb","loadSpineData","SkeletonData","loadAssetByResoucesDir","assets","resManager","addAsset","indexOf","releaseAllAsset","decRef"],"mappings":"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","sourcesContent":["import { Asset, assetManager, AssetManager, sp, SpriteFrame, Texture2D, resources } from \"cc\";\n\nclass ResManager {\n\n    // 单例\n    private static _instance: ResManager;\n    private constructor() {}\n    public static get instance(): ResManager {\n        if (!this._instance) {\n            this._instance = new ResManager();\n        }\n        return this._instance;\n    }\n\n    /**\n     * 从bundle中加载某个资源，优先使用缓存中的\n     * @param bundleName bundle名称\n     * @param path 资源路径\n     * @param assetType 资源类型\n     * @param onProgress 加载进度回调\n     * @param onComplete 加载完成回调\n     */\n    loadAsset(bundleName: string, path: string, assetType: any, onProgress?: Function, onComplete?: Function) {\n        if (assetType == SpriteFrame) {\n            path += \"/spriteFrame\";\n        } else if (assetType == Texture2D) {\n            path += \"/texture\";\n        }\n\n        let bundle = assetManager.getBundle(bundleName);\n        if (bundle && bundle.get(path, assetType)) {\n            if (onComplete) {\n                onComplete(null, bundle.get(path, assetType));\n            }\n            return;\n        }\n\n        let loadAssetFunc = () => {\n            bundle.load(path, assetType, (finish: number, total: number) => {\n                if (onProgress) {\n                    onProgress(finish / total);\n                }\n            }, (err, asset) => {\n                if (err) {\n                    console.error(\"ResManager.loadAsset error:\" + err.message, \"bundleName:\" + bundleName, \"path:\" + path, err);\n                    if (onComplete) {\n                        onComplete(err);\n                    }\n                    return;\n                }\n                if (onComplete) {\n                    onComplete(null, asset);\n                }\n            });\n        };\n\n        if (!bundle) {\n            assetManager.loadBundle(bundleName, (err, retBundle) => {\n                if (err) {\n                    if (onComplete) {\n                        onComplete(err);\n                    }\n                    return;\n                }\n\n                bundle = retBundle;\n                loadAssetFunc();\n            });\n            return;\n        }\n\n        loadAssetFunc();\n    }\n\n    /**\n     * 加载某个bundle中的批量同类型资源\n     * @param bundleName bundle名称\n     * @param pathArr 资源路径数组\n     * @param assetType 资源类型\n     * @param onProgress 进度回调\n     * @param onComplete 完成回调\n     */\n    loadAssetByPathArr(bundleName: string, pathArr: string[], assetType: any, onProgress?: Function, onComplete?: Function) {\n        let total = pathArr.length;\n        if (total <= 0) {\n            if (onComplete) {\n                onComplete([]);\n            }\n            return;\n        }\n\n        let lastPercent = 0;\n        let onePercent = 1 / total;\n        let assetPercents: Map<string, number> = new Map();\n        let count = 0;\n        let arr = [];\n        for (let i = 0; i < total; i++) {\n            let path = pathArr[i];\n            this.loadAsset(bundleName, path, assetType, (p: number) => {\n                assetPercents.set(path, p);\n                if (onProgress) {\n                    let percent = 0;\n                    assetPercents.forEach((p: number) => {\n                        percent = percent + onePercent * p;\n                    });\n                    if (percent >= lastPercent) {\n                        lastPercent = percent;\n                        onProgress(percent);\n                    }\n                }\n            }, (err, asset) => {\n                count++;\n                if (!err && asset) {\n                    asset.path = path;\n                    arr.push(asset);\n                }\n                if (count >= total) {\n                    if (onComplete) {\n                        onComplete(arr);\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * 加载bundle某个目录下的所有同类型资源\n     * @param bundleName bundle名称\n     * @param dir 目录\n     * @param assetType 资源类型\n     * @param onProgress 进度回调\n     * @param onComplete 完成回调\n     */\n    loadAssetByBundleDir(bundleName: string, dir: string, assetType: any, onProgress?: Function, onComplete?: Function) {\n        let bundle = assetManager.getBundle(bundleName);\n\n        let loadAssetFunc = () => {\n            bundle.loadDir(dir, assetType, (finish: number, total: number, item: AssetManager.RequestItem) => {\n                if (onProgress) {\n                    onProgress(finish / total, item);\n                }\n            }, (err, assetArr) => {\n                if (err) {\n                    console.error(\"ResManager.loadAssetByBundleDir loadDir error:\" + err.message, err);\n                }\n                if (onComplete) {\n                    onComplete(assetArr);\n                }\n            });\n        };\n\n        if (!bundle) {\n            assetManager.loadBundle(bundleName, (err, retBundle) => {\n                if (err) {\n                    console.error(\"ResManager.loadAssetByBundleDir loadBundle error:\" + err.message, err);\n                    return;\n                }\n                bundle = retBundle;\n                loadAssetFunc();\n            });\n            return;\n        }\n\n        loadAssetFunc();\n    }\n\n    /**\n     * 单纯加载一批bundle\n     * @param nameArr bundle名称数组 \n     * @param onProgress 进度回调\n     * @param onComplete 完成回调\n     */\n    loadBundleArr(nameArr: string[], onProgress?: Function, onComplete?: Function) {\n        let total = nameArr.length;\n        if (total <= 0) {\n            if (onComplete) {\n                onComplete();\n            }\n            return;\n        }\n        let count = 0;\n        let arr = [];\n        for (let i = 0; i < total; i++) {\n            let bundleName = nameArr[i];\n            console.log(\"--------loadBundleArr\", bundleName)\n            assetManager.loadBundle(bundleName, (err, retBundle) => {\n                count++;\n                if (!err) {\n                    arr.push(retBundle);\n                }\n                if (count >= total) {\n                    if (onComplete) {\n                        onComplete(arr);\n                    }\n                }\n                if (onProgress) {\n                    onProgress(count / total);\n                }\n            });\n        }\n    }\n\n    // 强制释放某资源\n    releaseAsset(asset: Asset) {\n        assetManager.releaseAsset(asset);\n    }\n\n    /**\n     * 加载资源清单数组\n     * @param assetConfigArr 资源清单数组\n        [\n            {\n                bundle : \"common\",\n                path : \"\",\n                type : Prefab\n            }\n        ]\n     * @param isAddRef 是否增加引用计数\n     * @param onProgress 进度回调\n     * @param onComplete 完成回调\n     */\n    loadAssetConfigArr(assetConfigArr: [AssetConfig], isAddRef: boolean = false, onProgress?: Function, onComplete?: Function) {\n        let total = 0;\n        if (assetConfigArr && assetConfigArr.length > 0) {\n            total = assetConfigArr.length;\n        }\n        if (total <= 0) {\n            if (onComplete) {\n                onComplete();\n            }\n            return;\n        }\n\n        let index = 0;\n        let loadedAssetArr = [];\n        let tmpFunc = () => {\n            let asset = assetConfigArr[index];\n            if (!asset) {\n                // 全部加载完成\n                if (onComplete) {\n                    onComplete(loadedAssetArr);\n                }\n                return;\n            }\n            this.loadAsset(asset.bundle, asset.path, asset.type, null, (error, loadedAsset) => {\n                if (!error && loadedAsset) {\n                    loadedAssetArr.push(loadedAsset);\n                    if (isAddRef) {\n                        loadedAsset.addRef();\n                    }\n                    asset.asset = loadedAsset;\n                }\n                index++;\n                tmpFunc();\n                if (onProgress) {\n                    onProgress(index / total);\n                }\n            });\n        };\n        tmpFunc();\n    }\n\n\n    loadSpriteFrame(bundleName: string, path: string, cb?: Function) {\n        this.loadAsset(bundleName, path, SpriteFrame, null, (err, sp: SpriteFrame) => {\n            if (cb) {\n                cb(err, sp);\n            }\n        });\n    }\n\n    loadSpineData(bundleName: string, path: string, cb?: Function) {\n        this.loadAsset(bundleName, path, sp.SkeletonData, null, (err, sp: sp.SkeletonData) => {\n            if (cb) {\n                cb(err, sp);\n            }\n        });\n    }\n\n    // 加载resources目录下某个同类型资源\n    loadAssetByResoucesDir(path: string, assetType: any, onProgress?: Function, onComplete?: Function) {\n        resources.loadDir(path, assetType, function (finish, total, item) {\n            if (onProgress) {\n                onProgress(finish / total);\n            }\n        }, function (err, assets) {\n            if (err) {\n                console.error(\"resources.loadDir error:\" + err.message, \"path:\" + path, err);\n                if (onComplete) {\n                    onComplete(err);\n                }\n                return;\n            }\n            if (onComplete) {\n                onComplete(null, assets);\n            }\n        });\n    }\n}\n\nconst resManager = ResManager.instance;\n\nclass ResLoader {\n\n    public loadedAssetArr: Asset[] = [];\n\n    public addAsset(asset: Asset) {\n        if (!asset) {\n            return;\n        }\n        if (this.loadedAssetArr.indexOf(asset) == -1) {\n            asset.addRef();\n            this.loadedAssetArr.push(asset);\n        }\n    }\n\n    public releaseAllAsset() {\n        this.loadedAssetArr.forEach((asset: Asset) => {\n            asset.decRef();\n        });\n        this.loadedAssetArr = [];\n    }\n\n}\n\nclass AssetConfig {\n    bundle: string;\n    path: string;\n    type: any;\n    // 加载成功后，得到的资源对象\n    asset?: any;\n}\n\nexport { resManager, ResLoader, AssetConfig };\n"]}