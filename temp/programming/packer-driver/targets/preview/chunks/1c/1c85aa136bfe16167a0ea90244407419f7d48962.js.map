{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/minigame3/Aby/assets/scripts/game/layer/LoadingLayer.ts"],"names":["_decorator","ProgressBar","BaseLayer","constants","layerManager","utilTools","designManager","resManager","ccclass","property","LoadingLayer","progress","progressBar","designResProgress","designResPercent","bundleArrProgress","bundleArrPercent","bundleLoadingTime","bundleLoadingMaxTime","layerProgress","layerPercent","onLoad","getNodeByPath","getComponent","setProgressBar","setString","version","onEnable","waterfall","result","cb","loadDesignRes","loadBundleRes","loadCommonLayerRes","console","info","loadAllDesignTables","bundles","design","percent","bundleArr","common","layer","prefab","spine","ui","loadBundleArr","arr","layers","HomeLayer","loadCommonLayers","update","dt","p","calculateCurrentProcess","scheduleOnce","openHomeLayer","Math","ceil","closeLayer","openLayer"],"mappings":"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","sourcesContent":["import { _decorator, Component, log, Node, ProgressBar } from 'cc';\nimport { BaseLayer } from '../../framework/common/BaseLayer';\nimport { constants } from '../data/Constants';\nimport { layerManager } from '../../framework/manager/LayerManager';\nimport { utilTools } from '../../framework/utils/UtilTools';\nimport { designManager } from '../../framework/manager/DesignManager';\nimport { resManager } from '../../framework/manager/ResManager';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('LoadingLayer')\nexport class LoadingLayer extends BaseLayer {\n    \n    // 加载进度\n    private progress: number = 0;\n    private progressBar: ProgressBar;\n\n    // 策划表\n    private designResProgress: number = 0;\n    private designResPercent: number = 0.1;\n\n    private bundleArrProgress: number = 0;\n    private bundleArrPercent: number = 0.8;\n    // 模拟bundle加载回调\n    private bundleLoadingTime: number = -1;\n    private bundleLoadingMaxTime: number = 6;\n\n    // 页面\n    private layerProgress: number = 0;\n    private layerPercent: number = 0.1;\n\n    onLoad() {\n        super.onLoad();\n\n        this.progressBar = this.getNodeByPath(\"UI/ProgressBar\").getComponent(ProgressBar);\n        this.setProgressBar(this.progressBar, this.progress);\n\n        this.setString(this.getNodeByPath(\"Version\"), constants.version);\n\n        // TODO 初始化SDK\n    }\n\n    onEnable() {\n        utilTools.waterfall([\n            (result: any, cb: Function) => {\n                this.loadDesignRes(cb);\n            },\n            (result: any, cb: Function) => {\n                this.loadBundleRes(cb);\n            },\n            (result: any, cb: Function) => {\n                this.loadCommonLayerRes(cb);\n            },\n        ]);    \n    }\n\n    loadDesignRes(cb: Function) {\n        console.info(\"loadDesignRes\");\n        designManager.loadAllDesignTables(constants.bundles.design, \"design\", (percent: number) => {\n            this.designResProgress = percent;\n        }, () => {\n            this.designResProgress = 1;\n            if (cb) {\n                cb();\n            }\n        });\n    }\n\n    // 加载bundle资源\n    loadBundleRes(cb?: Function) {\n        console.info(\"loadBundleRes\");\n        this.bundleLoadingTime = 0;\n        let bundleArr = [\n            constants.bundles.common,\n            constants.bundles.layer,\n            constants.bundles.prefab,\n            constants.bundles.layer,\n            constants.bundles.spine,\n            constants.bundles.ui,\n        ];\n        resManager.loadBundleArr(bundleArr, (percent: number) => {\n            this.bundleArrProgress = percent;\n        }, () => {\n            this.bundleArrProgress = 1;\n            if (cb) {\n                cb();\n            }\n        });\n    }\n\n    // 加载layer资源\n    loadCommonLayerRes(cb?: Function) {\n        console.info(\"loadCommonLayerRes\");\n        let arr = [\n            constants.layers.HomeLayer,\n        ];\n        layerManager.loadCommonLayers(constants.bundles.layer, arr, (percent: number) => {\n            this.layerProgress = percent;\n        }, () => {\n            this.layerProgress = 1;\n            if (cb) {\n                cb();\n            }\n        });\n    }\n\n    update(dt: number) {\n        if (!this.progressBar) {\n            return;\n        }\n\n        if (this.bundleLoadingTime >= 0) {\n            this.bundleLoadingTime += dt;\n            let p = this.bundleLoadingTime / this.bundleLoadingMaxTime;\n            if (p > 1) {\n                p = 1;\n            }\n            if (p > this.bundleArrProgress) {\n                this.bundleArrProgress = p;\n            }\n            if (this.bundleArrProgress >= 1) {\n                // 去除小数\n                this.bundleArrProgress = 1;\n            }\n        }\n\n        let progress = this.calculateCurrentProcess();\n        if (progress > this.progressBar.progress) {\n            this.setProgressBar(this.progressBar, progress);\n        }\n\n        if (progress >= 1) {\n            this.scheduleOnce(() => {\n                this.openHomeLayer();\n            }, 0.5);\n        }\n    }\n\n    // 计算当前加载进度\n    calculateCurrentProcess(): number {\n        let progress = this.designResProgress * this.designResPercent\n            + this.bundleArrProgress * this.bundleArrPercent\n            + this.layerProgress * this.layerPercent;\n\n        // 防止计算过后是0.999999的情况    \n        progress = Math.ceil(progress * 10000) / 10000;\n        return progress;\n    }\n\n    openHomeLayer() {\n        this.closeLayer();\n        this.openLayer(constants.layers.HomeLayer);\n    }\n}\n"]}