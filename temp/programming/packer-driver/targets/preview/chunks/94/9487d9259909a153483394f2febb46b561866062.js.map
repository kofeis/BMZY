{"version":3,"sources":["file:///D:/Cocos/Project/XH/assets/Script/Tool/Tool_NetWork.ts"],"names":["_decorator","Component","ccclass","property","Tool_NetWork","UrlRequest","HttpRequest","Options","Cache","UrlO","Url","Params","queryString","URLSearchParams","toString","includes","console","log","Method","Response","fetch","method","headers","body","JSON","stringify","Data","undefined","cache","Status","status","debug","json","error","Request_Add","Request_Delete","Object","keys","length","ItemToDelete","Request_Check","Array","isArray","DeleteResults","Promise","all","map","Item","id","then","Id","Success","catch","Error","message","Request_Modify","ItemToUpdate","UpdateResults","Result","instance"],"mappings":"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","sourcesContent":["import { _decorator, Component, Constructor, find, isValid, Node, sys, UITransform, v3, Vec3, view, Widget, Prefab, instantiate, Sprite, SpriteFrame, Color, color, UIOpacity, Layers, Label, Texture2D, Rect } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Tool_NetWork')\nexport class Tool_NetWork extends Component {\n\n    public static readonly instance = new Tool_NetWork();\n\n\n    UrlRequest: string = \"https://6808403a942707d722ddad99.mockapi.io/Data\";\n\n    /**\n     * 统一的 HTTP 请求函数\n     * @param Options 请求配置选项\n     * @returns 响应数据或 null (如果失败)\n     */\n    async HttpRequest(Options: {\n        Url: string;\n        Method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n        Data?: any;\n        Params?: Record<string, string>;\n    }, Cache: RequestCache = \"no-cache\"): Promise<any> {\n        try {\n            // 处理查询参数\n            let UrlO = Options.Url;\n            if (Options.Params) {\n                const queryString = new URLSearchParams(Options.Params).toString();\n                UrlO += (UrlO.includes('?') ? '&' : '?') + queryString;\n                console.log(UrlO, Options.Method);\n\n            }\n            const Response = await fetch(UrlO, {\n                method: Options.Method,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Cache-Control': 'no-cache',\n                },\n                body: Options.Method !== 'GET' ? JSON.stringify(Options.Data) : undefined,\n                cache: Cache,\n            });\n            const Status = Response.status;\n            console.log(\"请求回复:\", Status, Response);\n            // 204 响应没有内容，不需要尝试解析 JSON\n            if (Status === 204) {\n                console.debug(\"204 No Content - DELETE 请求成功\");\n                return null;\n            }\n            // 其他成功状态码尝试解析 JSON\n            if (Status >= 200 && Status < 300) {\n                return await Response.json();\n            }\n            // 错误处理\n            switch (Status) {\n                case 400:\n                    console.debug(\"400 Bad Request - 请求错误\");\n                    break;\n                case 403:\n                    console.debug(\"403 Forbidden - 无权限\");\n                    break;\n                case 404:\n                    console.debug(\"404 Not Found - 资源不存在\");\n                    break;\n                default:\n                    console.debug(`未处理的状态码: ${Status}`);\n            }\n            return null;\n        } catch (error) {\n            console.error(\"请求失败:\", error);\n            throw error; // 抛出错误以便调用者处理\n        }\n    }\n\n\n    /**\n     * 增添数据\n     * @param Url API地址\n     * @param Data 数据\n     * @returns 单个操作返回直接结果，批量操作返回结果数组\n     * @example\n     * await Tool_NetWork.instance.Request_Add(`${Tool_NetWork.instance.UrlRequest}`, Data);\n     */\n    async Request_Add(Url: string, Data: any) {\n        return await this.HttpRequest({\n            Url: Url,\n            Method: \"POST\",\n            Data: Data,\n        });\n    }\n\n    /**\n     * 删除数据\n     * @param Url API地址\n     * @param Params 查询参数\n     * @returns 单个操作返回直接结果，批量操作返回结果数组\n     * @example\n     * await Tool_NetWork.instance.Request_Delete(`${Tool_NetWork.instance.UrlRequest}`, { Key : Value });\n     * await Tool_NetWork.instance.Request_Delete(`${Tool_NetWork.instance.UrlRequest}/${Id}`);\n     */\n    async Request_Delete(\n        Url: string,\n        Params?: Record<string, string>\n    ): Promise<any | Array<{ id: string | number; success: boolean; error?: any }>> {\n        //如果没有Params参数，执行单个删除\n        if (!Params || Object.keys(Params).length === 0) {\n            return await this.HttpRequest({\n                Url: Url,\n                Method: \"DELETE\"\n            });\n        }\n        //有Params参数，执行批量删除\n        try {\n            //查询符合条件的数据\n            const ItemToDelete = await this.Request_Check(Url, Params);\n            if (!Array.isArray(ItemToDelete)) {\n                console.debug(\"API返回数据格式错误:期望数组\", ItemToDelete);\n                return;\n            }\n            //并行执行批量删除\n            const DeleteResults = await Promise.all(\n                ItemToDelete.map(Item =>\n                    this.HttpRequest({\n                        Url: `${Url}/${Item.id}`,\n                        Method: \"DELETE\"\n                    })\n                        .then(() => ({\n                            Id: Item.id,\n                            Success: true,\n                        }))\n                        .catch(error => {\n                            console.error(`删除 ${Item.id} 时出错:`, error);\n                            return {\n                                Id: Item.id,\n                                Success: false,\n                                Error: error.message || error\n                            };\n                        })\n                )\n            );\n            console.debug(\"批量删除完成，结果:\", DeleteResults);\n            return DeleteResults;\n        } catch (error) {\n            console.error(\"批量删除失败:\", error);\n        }\n    }\n\n    /**\n     * 修改数据\n     * @param Url API地址（批量操作时为基础地址）\n     * @param Data 要更新的数据内容\n     * @param Params 查询参数（存在时执行批量操作）\n     * @param Method 更新方法，默认为PUT\n     * @returns 单个操作返回直接结果，批量操作返回结果数组\n     * @example\n     * await Tool_NetWork.instance.Request_Modify(`${Tool_NetWork.instance.UrlRequest}`, Data, { Key: Value });\n     * await Tool_NetWork.instance.Request_Modify(`${Tool_NetWork.instance.UrlRequest}/${Id}`, Data);\n     */\n    async Request_Modify(\n        Url: string,\n        Data: any,\n        Params?: Record<string, string>,\n        Method: \"PUT\" | \"PATCH\" = \"PUT\"\n    ): Promise<any | Array<{ id: string | number; success: boolean; data?: any; error?: string }>> {\n        //如果没有Params参数，执行单个更新\n        if (!Params || Object.keys(Params).length === 0) {\n            return await this.HttpRequest({\n                Url: Url,\n                Method: Method,\n                Data: Data\n            });\n        }\n        //有Params参数，执行批量更新\n        try {\n            //查询符合条件的数据\n            const ItemToUpdate = await this.Request_Check(Url, Params);\n            if (!Array.isArray(ItemToUpdate)) {\n                console.debug(\"API返回数据格式错误:期望数组\", ItemToUpdate);\n                return;\n            }\n            //并行执行批量更新\n            const UpdateResults = await Promise.all(\n                ItemToUpdate.map(Item =>\n                    this.HttpRequest({\n                        Url: `${Url}/${Item.id}`,\n                        Method: Method,\n                        Data: Data,\n                    }).then(Result => ({\n                        Id: Item.id,\n                        Success: true,\n                        Data: Result,\n                    })).catch(error => {\n                        console.error(`更新 ${Item.id} 时出错:`, error);\n                        return {\n                            Id: Item.id,\n                            Success: false,\n                            Error: error.message\n                        };\n                    })\n                )\n            );\n            console.debug(\"批量更新完成，结果:\", UpdateResults);\n            return UpdateResults;\n        } catch (error) {\n            console.error(\"批量更新失败:\", error);\n        }\n    }\n\n     /**\n     * 查询数据\n     * @param Url API地址\n     * @param Params 查询参数\n     * @example\n     * await Tool_NetWork.instance.Request_Modify(`${Tool_NetWork.instance.UrlRequest}`, { Key: Value });\n     * await Tool_NetWork.instance.Request_Modify(`${Tool_NetWork.instance.UrlRequest}/${Id}`);\n     */\n    async Request_Check(Url: string, Params?: Record<string, string>) {\n        return await this.HttpRequest({\n            Url: Url,\n            Method: \"GET\",\n            Params: Params,\n        });\n    }\n\n}\n\n\n"]}