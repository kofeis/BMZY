{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/minigame3/Aby/assets/scripts/framework/manager/EventManager.ts"],"names":["EventManager","constructor","actions","instance","_instance","register","cmd","cb","sender","arr","i","item","push","remove","tmpArr","removeBySender","ac","emit","data","info","call","err","console","error","message","eventManager"],"mappings":"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","sourcesContent":["class EventManager {\n\n    private static _instance: EventManager;\n\n    private constructor() {}\n\n    public static get instance(): EventManager {\n        if (!this._instance) {\n            this._instance = new EventManager();\n        }\n        return this._instance;\n    }\n\n    actions: any = {};\n\n    // 注册监听事件\n    register(cmd: string | number, cb: Function, sender: any) {\n        let arr = this.actions[cmd];\n        if (!arr) {\n            arr = [];\n            this.actions[cmd] = arr;\n        }\n\n        // 避免重复添加\n        for (let i in arr) {\n            let item = arr[i];\n            if (item.sender == sender) {\n                return;\n            }\n        }\n\n        let item: any = {};\n        item.cb = cb;\n        item.sender = sender;\n        arr.push(item);\n    }\n\n    // 删除监听事件\n    remove(cmd: string | number, cb: Function, sender: any) {\n        let arr = this.actions[cmd];\n        if (!arr) {\n            return;\n        }\n\n        let tmpArr = [];\n        for (let i in arr) {\n            let item = arr[i];\n            if (item.cb == cb && item.sender == sender) {\n                continue;\n            }\n            tmpArr.push(item);\n        }\n\n        this.actions[cmd] = tmpArr;\n    }\n\n    removeBySender(sender: any) {\n        for (let ac in this.actions) {\n            let arr = this.actions[ac];\n\n            let tmpArr = [];\n            for (let i in arr) {\n                let item = arr[i];\n                if (item.sender == sender) {\n                    continue;\n                }\n                tmpArr.push(item);\n            }\n\n            this.actions[ac] = tmpArr;\n        }\n    }\n\n    emit(cmd: string | number, data?: any) {\n        let arr = this.actions[cmd];\n        if (!arr) {\n            return;\n        }\n\n        try {\n            for (let i in arr) {\n                let item = arr[i];\n                let cb = item.cb;\n                let sender = item.sender;\n                let info = {\n                    cmd: cmd,\n                    data: data\n                };\n                cb.call(sender, info);\n            }\n        } catch (err) {\n            console.error(\"eventManager send error: \" + err.message, cmd, data, err);\n        }\n    }\n}\n\nexport const eventManager = EventManager.instance;\n"]}