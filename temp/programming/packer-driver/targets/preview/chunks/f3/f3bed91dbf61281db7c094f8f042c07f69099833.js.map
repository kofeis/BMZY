{"version":3,"sources":["file:///D:/Cocos/XHAT/BMZY/assets/Script/Tool/Tool_RigidBody.ts"],"names":["_decorator","Component","RigidBody2D","v2","ccclass","property","Tool_RigidBody","Create_RigidBody","Node_Set","Type","Component_RigidBody2D","getComponent","addComponent","type","Destroy_RigidBody","scheduleOnce","isValid","removeComponent","setTimeout","Set_Linear_Velocity","X","Y","linearVelocity","Get_Linear_Velocity","Set_Angular_Velocity","AngularVelocity","angularVelocity","Get_Angular_Velocity","Apply_Force","Force","Point","applyForce","Apply_Linear_Impulse","Impulse","applyLinearImpulse","Apply_Torque","Torque","applyTorque","Wake_Up","wakeUp","Sleep","sleep","Is_Sleeping","isAwake","Reset_Velocity","Set_Body_Type","instance"],"mappings":"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","sourcesContent":["import { _decorator, BoxCollider2D, Component, Node, RigidBody, RigidBody2D, v2, Vec2 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Tool_RigidBody')\nexport class Tool_RigidBody extends Component {\n    public static readonly instance = new Tool_RigidBody();\n\n    /**\n     * 创建刚体组件（如已存在则返回原组件）\n     * @param Node_Set 目标节点\n     * @param Type 刚体类型 0:Dynamic 1:Static 2:Kinematic，默认0\n     * @returns RigidBody2D\n     * @example\n     * Tool_RigidBody.Create_RigidBody(node, 0)\n     */\n    public static Create_RigidBody(Node_Set: Node, Type: number = 0): RigidBody2D {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) {\n            Component_RigidBody2D = Node_Set.addComponent(RigidBody2D);\n        }\n        Component_RigidBody2D.type = Type;\n        return Component_RigidBody2D;\n    }\n\n    /**\n     * 销毁刚体组件（延迟到下一帧，避免物理系统引用导致报错）\n     * @param Node_Set 目标节点\n     * @example\n     * Tool_RigidBody.Destroy_RigidBody(node)\n     */\n    public static Destroy_RigidBody(Node_Set: Node) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (Component_RigidBody2D) {\n            // 延迟到下一帧移除，避免物理系统本帧引用导致报错\n            if (Node_Set.scheduleOnce) {\n                Node_Set.scheduleOnce(() => {\n                    if (Component_RigidBody2D.isValid && Node_Set.isValid) {\n                        Node_Set.removeComponent(Component_RigidBody2D);\n                    }\n                }, 0);\n            } else {\n                // 兼容非组件节点（如 scheduleOnce 不存在时）\n                setTimeout(() => {\n                    if (Component_RigidBody2D.isValid && Node_Set.isValid) {\n                        Node_Set.removeComponent(Component_RigidBody2D);\n                    }\n                }, 0);\n            }\n        }\n    }\n\n    /**\n     * 设置线性速度\n     * @param Node_Set 目标节点\n     * @param X x轴速度\n     * @param Y y轴速度\n     * @example\n     * Tool_RigidBody.Set_Linear_Velocity(node, 10, 0)\n     */\n    public static Set_Linear_Velocity(Node_Set: Node, X: number = 0, Y: number = 0) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.linearVelocity = v2(X, Y);\n    }\n\n    /**\n     * 获取线性速度\n     * @param Node_Set 目标节点\n     * @returns Vec2\n     * @example\n     * Tool_RigidBody.Get_Linear_Velocity(node)\n     */\n    public static Get_Linear_Velocity(Node_Set: Node): Vec2 | null {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return null;\n        return Component_RigidBody2D.linearVelocity;\n    }\n\n    /**\n     * 设置角速度\n     * @param Node_Set 目标节点\n     * @param AngularVelocity 角速度\n     * @example\n     * Tool_RigidBody.Set_Angular_Velocity(node, 5)\n     */\n    public static Set_Angular_Velocity(Node_Set: Node, AngularVelocity: number = 0) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.angularVelocity = AngularVelocity;\n    }\n\n    /**\n     * 获取角速度\n     * @param Node_Set 目标节点\n     * @returns number\n     * @example\n     * Tool_RigidBody.Get_Angular_Velocity(node)\n     */\n    public static Get_Angular_Velocity(Node_Set: Node): number | null {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return null;\n        return Component_RigidBody2D.angularVelocity;\n    }\n\n    /**\n     * 施加力\n     * @param Node_Set 目标节点\n     * @param Force 力\n     * @param Point 作用点（可选，默认中心）\n     * @example\n     * Tool_RigidBody.Apply_Force(node, v2(100,0))\n     */\n    public static Apply_Force(Node_Set: Node, Force: Vec2, Point?: Vec2) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.applyForce(Force, Point || v2(0, 0), true);\n    }\n\n    /**\n     * 施加线性冲量\n     * @param Node_Set 目标节点\n     * @param Impulse 冲量\n     * @param Point 作用点（可选，默认中心）\n     * @example\n     * Tool_RigidBody.Apply_Linear_Impulse(node, v2(10,0))\n     */\n    public static Apply_Linear_Impulse(Node_Set: Node, Impulse: Vec2, Point?: Vec2) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.applyLinearImpulse(Impulse, Point || v2(0, 0), true);\n    }\n\n    /**\n     * 施加扭矩\n     * @param Node_Set 目标节点\n     * @param Torque 扭矩\n     * @example\n     * Tool_RigidBody.Apply_Torque(node, 5)\n     */\n    public static Apply_Torque(Node_Set: Node, Torque: number) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.applyTorque(Torque, true);\n    }\n\n    /**\n     * 唤醒刚体\n     * @param Node_Set 目标节点\n     * @example\n     * Tool_RigidBody.Wake_Up(node)\n     */\n    public static Wake_Up(Node_Set: Node) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.wakeUp();\n    }\n\n    /**\n     * 休眠刚体\n     * @param Node_Set 目标节点\n     * @example\n     * Tool_RigidBody.Sleep(node)\n     */\n    public static Sleep(Node_Set: Node) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.sleep();\n    }\n\n    /**\n     * 判断刚体是否休眠\n     * @param Node_Set 目标节点\n     * @returns boolean\n     * @example\n     * Tool_RigidBody.Is_Sleeping(node)\n     */\n    public static Is_Sleeping(Node_Set: Node): boolean {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return false;\n        return Component_RigidBody2D.isAwake() === false;\n    }\n\n    /**\n     * 重置刚体速度（线性和角速度都归零）\n     * @param Node_Set 目标节点\n     * @example\n     * Tool_RigidBody.Reset_Velocity(node)\n     */\n    public static Reset_Velocity(Node_Set: Node) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.linearVelocity = v2(0, 0);\n        Component_RigidBody2D.angularVelocity = 0;\n    }\n\n    /**\n     * 设置刚体类型（0:动态 1:静态 2:运动学）\n     * @param Node_Set 目标节点\n     * @param Type 类型 0:Dynamic 1:Static 2:Kinematic\n     * @example\n     * Tool_RigidBody.Set_Body_Type(node, 0)\n     */\n    public static Set_Body_Type(Node_Set: Node, Type: number) {\n        let Component_RigidBody2D = Node_Set.getComponent(RigidBody2D);\n        if (!Component_RigidBody2D) return;\n        Component_RigidBody2D.type = Type;\n    }\n}\n\n\n"]}