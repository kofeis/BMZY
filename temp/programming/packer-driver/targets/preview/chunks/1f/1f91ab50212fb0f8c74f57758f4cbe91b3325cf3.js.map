{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/minigame3/Aby/assets/Script/Game/GameMode/PanelFindActor.ts"],"names":["_decorator","find","Label","Sprite","tween","UITransform","v3","Animation","UIOpacity","PanelTemplate","Tool_Other","Tool_UI","Tool_Event","PlatformApi","ccclass","property","PanelFindActor","FindActorLevel","LevelBg","Actors","Min_X","Max_X","Min_Y","Max_Y","ActorNumber","ScaleArr","onLoad","onEnable","IsInit","LoadPanel","GameStart","Resoure_Data","Music_Play","start","Promise","resolve","reject","node","BtnTip","BtnSetting","PanelVictory","active","BtnNext","getComponent","width","height","OnBtn","Game_Script","AnimSwitch","instance","On_Event_TOUCH_END","BtnTipCall","BtnNextCall","BtnSettingCall","Set_Btn_Event_Anim","ChooseWrongCall","PrefabActor","Load_Prefab","Actor","Set_Prefab_Node","getChildByName","ChooseCorrectCall","Score","ScoreTarget","GameVictory","i","GameInit","string","PosArr","Get_Random_Pos_Arr","children","length","position","scale","play","Sound_Play","showInterstitialAd","FindActorScore","IsHint","DataSet","UpdateScene","grayscale","set","fillRange","to","Event","PrefabError","Parent","Pos_Touch","Get_Touch_Position","NodeError","parallel","opacity","call","destroy","NodeTip","forEach","element","console","log","UpdatePanelSetting"],"mappings":"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","sourcesContent":["import { _decorator, Component, find, instantiate, Label, Node, Prefab, resources, Sprite, SpriteFrame, tween, UITransform, v2, v3, Vec2, Animation, log, UIOpacity } from 'cc';\nimport { PanelTemplate } from './PanelTemplate';\nimport { Tool_Other } from '../../Tool/Tool_Other';\nimport { Tool_UI } from '../../Tool/Tool_UI';\nimport { Tool_Event } from '../../Tool/Tool_Event';\nimport { PlatformApi } from '../../Other/SDK/PlatformApi';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PanelFindActor')\nexport class PanelFindActor extends PanelTemplate {\n\n    /**关卡等级 */\n    FindActorLevel: number = null;\n\n    /**关卡背景 */\n    LevelBg: Node = null;\n    /**演员节点 */\n    Actors: Node = null;\n\n    Min_X: number = null;\n    Max_X: number = null;\n    Min_Y: number = null;\n    Max_Y: number = null;\n\n\n    /**演员数量 */\n    ActorNumber: number = 10;\n\n    /**缩放配置 */\n    ScaleArr: number[] = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1];\n\n    async onLoad() {\n        super.onLoad();\n    }\n\n    async onEnable() {\n        if (!this.IsInit) {\n            await this.LoadPanel();\n        }\n        this.GameStart();\n        this.Resoure_Data.Music_Play(\"Audio/BGMGame\");\n    }\n\n    async start() {\n\n    }\n\n    /**加载面板 */\n    async LoadPanel(): Promise<void> {\n        return new Promise(async (resolve, reject) => {\n            /**绑定关键节点 */\n            this.LevelBg = find(\"Window/LevelBg\", this.node);\n            this.Actors = find(\"Window/Actors\", this.node);\n            this.BtnTip = find(\"Panel/PanelBtn/BtnTip\", this.node);\n            this.BtnSetting = find(\"Panel/PanelBtn/BtnSetting\", this.node);\n            this.PanelVictory = find(\"Panel/PanelVictory\", this.node);\n            this.PanelVictory.active = false;\n            this.BtnNext = find(\"BtnNext\", this.PanelVictory);\n\n            this.Max_X = this.Actors.getComponent(UITransform).width / 2;\n            this.Min_X = -this.Max_X;\n            this.Max_Y = this.Actors.getComponent(UITransform).height / 2;\n            this.Min_Y = -this.Max_Y;\n            /**注册按钮事件 */\n            await this.OnBtn(this.Game_Script.AnimSwitch);\n            this.IsInit = true;\n            resolve();\n        });\n    }\n\n    /**注册按钮 */\n    async OnBtn(AnimSwitch: boolean = false) {\n        /**设置按钮事件 */\n        Tool_Event.instance.On_Event_TOUCH_END(this.BtnTip, this.BtnTipCall, this);\n        Tool_Event.instance.On_Event_TOUCH_END(this.BtnNext, this.BtnNextCall, this);\n        Tool_Event.instance.On_Event_TOUCH_END(this.BtnSetting, this.BtnSettingCall, this);\n        /**设置按钮动画 */\n        Tool_Event.instance.Set_Btn_Event_Anim(this.BtnTip, AnimSwitch);\n        Tool_Event.instance.Set_Btn_Event_Anim(this.BtnNext, AnimSwitch);\n        Tool_Event.instance.Set_Btn_Event_Anim(this.BtnSetting, AnimSwitch);\n\n\n\n\n\n\n        Tool_Event.instance.On_Event_TOUCH_END(find(\"Window/LevelBg\", this.node), this.ChooseWrongCall, this);\n\n        let PrefabActor = await this.Resoure_Data.Load_Prefab(\"Prefab/PanelFindActor/Actor\");\n\n        for (let i = 0; i < this.ActorNumber; i++) {\n            let Actor = Tool_UI.instance.Set_Prefab_Node(PrefabActor, this.Actors, v3(0, 0, 0), \"\");\n            Tool_Event.instance.On_Event_TOUCH_END(Actor, () => {\n                if (Actor.getChildByName(\"Select\").active) {\n                    return;\n                }\n                this.ChooseCorrectCall(Actor);\n                this.Score++;\n                if (this.Score == this.ScoreTarget) {\n                    this.GameVictory();\n                }\n            })\n            Actor.getChildByName(\"Tip\").active = false;\n            Actor.getChildByName(\"Select\").active = false;\n        }\n\n\n    }\n\n\n\n\n    /**游戏初始 */\n    GameInit() {\n        this.Score = 0;\n        this.ScoreTarget = 10;\n    }\n\n    /**游戏开始 */\n    async GameStart() {\n        this.GameInit();\n        this.PanelVictory.active = false;\n        this.node.getChildByName(\"Title\").getChildByName(\"Leves\").getComponent(Label).string = `找找小熊·${this.Game_Script.FindActorLevel + 1}关`;\n        let PosArr = Tool_Other.instance.Get_Random_Pos_Arr(this.Actors.children.length, this.Min_X, this.Max_X, this.Min_Y, this.Max_Y, 200);\n        for (let i = 0; i < this.Actors.children.length; i++) {\n            this.Actors.children[i].position = PosArr[i];\n            this.Actors.children[i].getChildByName(\"Sp\").scale = v3(this.ScaleArr[i], this.ScaleArr[i], 1);\n            this.Actors.children[i].getChildByName(\"Sp\").getComponent(Animation).play();\n            this.Actors.children[i].getChildByName(\"Tip\").active = false;\n            this.Actors.children[i].getChildByName(\"Select\").active = false;\n        }\n\n    }\n\n    /**游戏胜利 */\n    GameVictory() {\n        /**胜利音效 */\n        this.Resoure_Data.Sound_Play(\"Audio/Sound/Victory\");\n\n\n        PlatformApi.instance.showInterstitialAd();\n        this.Game_Script.FindActorLevel++;\n        this.Game_Script.FindActorScore += this.Game_Script.IsHint ? 1 : 2;\n        /**保存数据 */\n        this.Game_Script.DataSet();\n        this.Game_Script.UpdateScene();\n        find(\"WinBanner/Condition1/Correct\", this.PanelVictory).active = !this.Game_Script.IsHint\n        find(\"WinBanner/Condition1/Wrong\", this.PanelVictory).active = this.Game_Script.IsHint;\n        find(\"WinBanner/Stars/StarR\", this.PanelVictory).getComponent(Sprite).grayscale = this.Game_Script.IsHint;\n        find(\"Light\", this.PanelVictory).getComponent(Animation).play();\n        this.PanelVictory.active = true;\n\n    }\n\n\n    /**选择正确回调 */\n    ChooseCorrectCall(Actor: Node) {\n        Actor.getChildByName(\"Tip\").active = false;\n        Actor.getChildByName(\"Select\").active = true;\n        tween(Actor.getChildByName(\"Select\").getComponent(Sprite))\n            .set({ fillRange: 0 })\n            .to(0.2, { fillRange: 1 })\n            .start();\n    };\n\n    /**选择错误回调 */\n    async ChooseWrongCall(Event: any) {\n        /**错误 */\n        this.Resoure_Data.Sound_Play(\"Audio/Sound/Error\");\n        let PrefabError = await this.Resoure_Data.Load_Prefab(\"Prefab/PanelFindActor/Error\");\n        let Parent = find(\"Window/LevelBg\", this.node);\n        let Pos_Touch = Tool_UI.instance.Get_Touch_Position(Event);\n        let NodeError = Tool_UI.instance.Set_Prefab_Node(PrefabError, Parent, Pos_Touch, \"\");\n        tween(NodeError)\n            .parallel(\n                tween().to(0.5, { scale: v3(1.2, 1.2, 1) }),\n                tween(NodeError.getComponent(UIOpacity)).to(0.5, { opacity: 0 })\n            )\n            .call(() => {\n                NodeError.destroy();\n            })\n            .start();\n    }\n\n    /**提示按钮回调 */\n    BtnTipCall() {\n        this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n        let NodeTip: Node = null;\n        this.Actors.children.forEach((element) => {\n            if (!element.getChildByName(\"Select\").active && !element.getChildByName(\"Tip\").active) {\n                NodeTip = element.getChildByName(\"Tip\");\n                return;\n            }\n        });\n        if (NodeTip == null) {\n            console.log(\"没有可以提示的了\");\n        } else {\n            NodeTip.active = true;\n            this.Game_Script.IsHint = true;\n        }\n    }\n\n    /**下一关按钮回调 */\n    BtnNextCall() {\n        this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n        this.GameStart();\n    }\n\n    /**设置按钮回调 */\n    BtnSettingCall() {\n        this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n        this.Game_Script.UpdatePanelSetting(true);\n    }\n\n\n    //     startGame() {\n    //         this.winNode.active = false;\n    //         this.defeatNode.active = false;\n    //         this.clearWolves();\n    //         this.setupBackground();\n    //         this.spawnWolves();\n    //         this.isGaming = true;\n    //         this.wolvesFound = 0;\n    //         this.remainingTime = 60;\n    //     }\n\n    //     clearWolves() {\n    //         this.wolvesContainer.removeAllChildren();\n    //     }\n\n    //     setupBackground() {\n    //         const bgIndex = (this.currentLevel - 1) % this.levelBackgrounds.length;\n    //         this.background.spriteFrame = new SpriteFrame(resources.get(this.levelBackgrounds[bgIndex]));\n    //     }\n\n    //     spawnWolves() {\n    //         const positions = this.generatePositions(10, -300, -410, 300, 410);\n\n    //         positions.forEach((pos, index) => {\n    //             const Actor = instantiate(this.ActorPrefab);\n    //             Actor.setPosition(pos);\n    //             this.wolvesContainer.addChild(Actor);\n\n    //             const scale = index < 10 - this.smallWolvesCount ? \n    //                 Math.random() * 0.9 + 0.1 : \n    //                 Math.random() * 0.05 + 0.025;\n\n    //             Actor.setScale(scale);\n\n    //             Actor.on(Node.EventType.TOUCH_END, () => this.onActorFound(Actor), this);\n    //         });\n    //     }\n\n    //     generatePositions(count: number, minX: number, minY: number, maxX: number, maxY: number): Vec2[] {\n    //         const positions: Vec2[] = [];\n    //         const positionSet = new Set<string>();\n\n    //         while (positions.length < count) {\n    //             const x = Math.random() * (maxX - minX) + minX;\n    //             const y = Math.random() * (maxY - minY) + minY;\n    //             const pos = v2(x, y);\n    //             const posKey = `${x},${y}`;\n\n    //             if (!positionSet.has(posKey) && !this.isOverlapping(pos, positions, 150)) {\n    //                 positions.push(pos);\n    //                 positionSet.add(posKey);\n    //             }\n    //         }\n\n    //         return positions;\n    //     }\n\n    //     isOverlapping(newPos: Vec2, existingPositions: Vec2[], minDistance: number): boolean {\n    //         return existingPositions.some(pos => {\n    //             return newPos.sub(pos).mag() < minDistance;\n    //         });\n    //     }\n\n    //     onActorFound(Actor: Node) {\n    //         if (!this.isGaming) return;\n\n    //         const ActorController = Actor.getComponent(\"ActorController\"); // 假设有ActorController组件\n    //         if (!ActorController.isFound) {\n    //             this.wolvesFound++;\n    //             ActorController.markAsFound();\n\n    //             if (this.wolvesFound >= 10) {\n    //                 this.winGame();\n    //             }\n    //         }\n    //     }\n\n    //     onBackgroundTap(event: Event.EventTouch) {\n    //         if (!this.isGaming) return;\n\n    //         const touchPos = this.background.node.convertToNodeSpaceAR(event.getLocation());\n    //         this.showErrorEffect(touchPos);\n    //         this.remainingTime -= 5;\n    //     }\n\n    //     showErrorEffect(position: Vec2) {\n    //         const effect = instantiate(this.errorEffectPrefab);\n    //         effect.setPosition(position);\n    //         this.background.node.addChild(effect);\n\n    //         tween(effect)\n    //             .to(0.2, { scale: 1.1 })\n    //             .to(0.2, { opacity: 0 })\n    //             .call(() => effect.destroy())\n    //             .start();\n    //     }\n\n    //     update(dt: number) {\n    //         if (!this.isGaming) return;\n\n    //         this.remainingTime -= dt;\n    //         this.timeLabel.string = Math.ceil(this.remainingTime).toString();\n\n    //         if (this.remainingTime <= 0) {\n    //             this.defeat();\n    //         }\n    //     }\n\n    //     winGame() {\n    //         this.isGaming = false;\n    //         this.winNode.active = true;\n    //         this.winNode.opacity = 0;\n\n    //         tween(this.winNode)\n    //             .to(0.2, { opacity: 255 })\n    //             .start();\n    //     }\n\n    //     defeat() {\n    //         this.isGaming = false;\n    //         this.defeatNode.active = true;\n    //         this.defeatNode.opacity = 0;\n\n    //         tween(this.defeatNode)\n    //             .to(0.2, { opacity: 255 })\n    //             .start();\n    //     }\n\n    //     restartGame() {\n    //         this.startGame();\n    //     }\n\n    //     nextLevel() {\n    //         this.currentLevel++;\n    //         this.smallWolvesCount = this.calculateSmallWolvesCount();\n    //         this.startGame();\n    //     }\n\n    //     calculateSmallWolvesCount(): number {\n    //         if (this.currentLevel < 3) return 2;\n    //         if (this.currentLevel < 6) return 4;\n    //         return 6;\n    //     }\n    // }\n\n\n\n\n\n\n}\n\n\n\n\n\n\n"]}