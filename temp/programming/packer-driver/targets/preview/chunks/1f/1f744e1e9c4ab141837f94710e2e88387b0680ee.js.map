{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/minigame3/Aby/assets/Script/Game/GameMode/PanelFindWolf.ts"],"names":["_decorator","find","Sprite","tween","UITransform","v3","Animation","PanelTemplate","Tool_Other","Tool_UI","Tool_Event","ccclass","property","PanelFindWolf","FindWolfLevel","LevelBg","Wolfs","Min_X","Max_X","Min_Y","Max_Y","ScaleArr","start","DataGet","DataSet","node","BtnTip","BtnSetting","PanelVictory","active","BtnNext","getComponent","width","height","OnBtn","GameStart","instance","On_Event_TOUCH_END","BtnTipCall","BtnNextCall","BtnSettingCall","InitData","Score","ScoreTarget","PosArr","Get_Random_Pos_Arr","children","length","PrefabWolf","Resoure_Data","Load_Prefab","Wolf","Set_Prefab_Node","position","i","getChildByName","scale","play","ShowSelect","GameVictory","set","fillRange","to","console","log","Sound_Play","NodeTip","forEach","element","Node_Index_Set","Game_Script","PanelSetting","PS_BtnMain","Data_Get","undefined","Data_Set"],"mappings":"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B,IAAyBA,aAAa,IAAI4D,SAA9C,EAAyD;AACrD,iBAAK5D,aAAL,GAAqB,CAArB;AACA,iBAAKmC,YAAL,CAAkB0B,QAAlB,CAA2B,eAA3B,EAA4C,KAAK7D,aAAjD;AACAA,YAAAA,aAAa,GAAG,KAAKmC,YAAL,CAAkBwB,QAAlB,CAA2B,eAA3B,CAAhB;AACH;;AACD,eAAK3D,aAAL,GAAqBA,aAArB;AACH;AAED;;;AACAU,QAAAA,OAAO,GAAG;AACN,eAAKyB,YAAL,CAAkB0B,QAAlB,CAA2B,eAA3B,EAA4C,KAAK7D,aAAjD;AACH,SA1K4C,CA4K7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AA3T6C,O","sourcesContent":["import { _decorator, Component, find, instantiate, Label, Node, Prefab, resources, Sprite, SpriteFrame, tween, UITransform, v2, v3, Vec2, Animation, log } from 'cc';\nimport { PanelTemplate } from './PanelTemplate';\nimport { Tool_Other } from '../../Tool/Tool_Other';\nimport { Tool_UI } from '../../Tool/Tool_UI';\nimport { Tool_Event } from '../../Tool/Tool_Event';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PanelFindWolf')\nexport class PanelFindWolf extends PanelTemplate {\n\n    /**关卡等级 */\n    FindWolfLevel: number = null;\n\n    /**关卡背景 */\n    LevelBg: Node = null;\n    /**狼节点 */\n    Wolfs: Node = null;\n\n    Min_X: number = null;\n    Max_X: number = null;\n    Min_Y: number = null;\n    Max_Y: number = null;\n\n    /**缩放配置 */\n    ScaleArr: number[] = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1];\n\n    async start() {\n        super.start();\n        this.DataGet();\n        this.DataSet();\n\n        this.LevelBg = find(\"Window/LevelBg\", this.node);\n        this.Wolfs = find(\"Window/Wolfs\", this.node);\n\n        this.BtnTip = find(\"Panel/PanelBtn/BtnTip\", this.node);\n        this.BtnSetting = find(\"Panel/PanelBtn/BtnSetting\", this.node);\n        this.PanelVictory = find(\"Panel/PanelVictory\", this.node);\n        this.PanelVictory.active = false;\n        this.BtnNext = find(\"BtnNext\", this.PanelVictory);\n\n        this.Max_X = this.Wolfs.getComponent(UITransform).width / 2;\n        this.Min_X = -this.Max_X;\n        this.Max_Y = this.Wolfs.getComponent(UITransform).height / 2;\n        this.Min_Y = -this.Max_Y;\n\n        this.OnBtn();\n        this.GameStart();\n    }\n\n\n\n\n\n    /**注册按钮 */\n    OnBtn() {\n\n        Tool_Event.instance.On_Event_TOUCH_END(this.BtnTip, this.BtnTipCall, this);\n        Tool_Event.instance.On_Event_TOUCH_END(this.BtnNext, this.BtnNextCall, this);\n        Tool_Event.instance.On_Event_TOUCH_END(this.BtnSetting, this.BtnSettingCall, this);\n\n    }\n\n\n    /**初始数据 */\n    InitData() {\n        this.Score = 0;\n        this.ScoreTarget = 10;\n    }\n\n    /**游戏开始 */\n    async GameStart() {\n        this.InitData();\n        this.PanelVictory.active = false;\n\n        Tool_UI.instance\n\n        let PosArr = Tool_Other.instance.Get_Random_Pos_Arr(10, this.Min_X, this.Max_X, this.Min_Y, this.Max_Y);\n\n\n        if (this.Wolfs.children.length == 0) {\n            let PrefabWolf = await this.Resoure_Data.Load_Prefab(\"Prefab/PanelFindWolf/Wolf\");\n            for (let i = 0; i < PosArr.length; i++) {\n                let Wolf = Tool_UI.instance.Set_Prefab_Node(PrefabWolf, this.Wolfs, v3(0, 0, 0), \"\");\n                Wolf.position = PosArr[i];\n                Wolf.getChildByName(\"Sp\").scale = v3(this.ScaleArr[i], this.ScaleArr[i], 1);\n                Wolf.getChildByName(\"Sp\").getComponent(Animation).play();\n                Tool_Event.instance.On_Event_TOUCH_END(Wolf, () => {\n                    if (Wolf.getChildByName(\"Select\").active) {\n                        return;\n                    }\n                    this.ShowSelect(Wolf);\n                    this.Score++;\n                    if (this.Score == this.ScoreTarget) {\n                        this.GameVictory();\n                    }\n                })\n                Wolf.getChildByName(\"Tip\").active = false;\n                Wolf.getChildByName(\"Select\").active = false;\n            }\n        } else {\n            for (let i = 0; i < this.Wolfs.children.length; i++) {\n                this.Wolfs.children[i].position = PosArr[i];\n                this.Wolfs.children[i].getChildByName(\"Sp\").scale = v3(this.ScaleArr[i], this.ScaleArr[i], 1);\n                this.Wolfs.children[i].getChildByName(\"Sp\").getComponent(Animation).play();\n\n                this.Wolfs.children[i].getChildByName(\"Tip\").active = false;\n                this.Wolfs.children[i].getChildByName(\"Select\").active = false;\n            }\n        }\n\n\n    }\n\n    /**选中 */\n    ShowSelect(Wolf: Node) {\n        Wolf.getChildByName(\"Tip\").active = false;\n        Wolf.getChildByName(\"Select\").active = true;\n        tween(Wolf.getChildByName(\"Select\").getComponent(Sprite))\n            .set({ fillRange: 0 })\n            .to(0.2, { fillRange: 1 })\n            .start();\n    };\n\n    /**游戏胜利 */\n    GameVictory() {\n        console.log(\"游戏胜利\");\n        this.FindWolfLevel++;\n        this.DataSet();\n\n        this.PanelVictory.active = true;\n    }\n\n    /**提示按钮回调 */\n    BtnTipCall() {\n        this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n        let NodeTip: Node = null;\n        this.Wolfs.children.forEach((element) => {\n            if (!element.getChildByName(\"Select\").active && !element.getChildByName(\"Tip\").active) {\n                NodeTip = element.getChildByName(\"Tip\");\n                return;\n            }\n        });\n        if (NodeTip == null) {\n            console.log(\"没有可以提示的了\");\n        } else {\n            NodeTip.active = true;\n        }\n    }\n\n    /**下一关 */\n    BtnNextCall() {\n        this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n        this.GameStart();\n    }\n\n    /**设置界面 */\n    BtnSettingCall() {\n        this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n        Tool_UI.instance.Node_Index_Set(this.Game_Script.PanelSetting, -1);\n        this.Game_Script.PS_BtnMain.active = true;\n        this.Game_Script.PanelSetting.active = true;\n    }\n\n    /**设置数据 */\n    DataGet() {\n        /**openId */\n        let FindWolfLevel = this.Resoure_Data.Data_Get(\"FindWolfLevel\");\n        if (FindWolfLevel == null || FindWolfLevel == undefined) {\n            this.FindWolfLevel = 0;\n            this.Resoure_Data.Data_Set(\"FindWolfLevel\", this.FindWolfLevel);\n            FindWolfLevel = this.Resoure_Data.Data_Get(\"FindWolfLevel\");\n        }\n        this.FindWolfLevel = FindWolfLevel;\n    }\n\n    /**保存数据 */\n    DataSet() {\n        this.Resoure_Data.Data_Set(\"FindWolfLevel\", this.FindWolfLevel);\n    }\n\n    //     startGame() {\n    //         this.winNode.active = false;\n    //         this.defeatNode.active = false;\n    //         this.clearWolves();\n    //         this.setupBackground();\n    //         this.spawnWolves();\n    //         this.isGaming = true;\n    //         this.wolvesFound = 0;\n    //         this.remainingTime = 60;\n    //     }\n\n    //     clearWolves() {\n    //         this.wolvesContainer.removeAllChildren();\n    //     }\n\n    //     setupBackground() {\n    //         const bgIndex = (this.currentLevel - 1) % this.levelBackgrounds.length;\n    //         this.background.spriteFrame = new SpriteFrame(resources.get(this.levelBackgrounds[bgIndex]));\n    //     }\n\n    //     spawnWolves() {\n    //         const positions = this.generatePositions(10, -300, -410, 300, 410);\n\n    //         positions.forEach((pos, index) => {\n    //             const wolf = instantiate(this.wolfPrefab);\n    //             wolf.setPosition(pos);\n    //             this.wolvesContainer.addChild(wolf);\n\n    //             const scale = index < 10 - this.smallWolvesCount ? \n    //                 Math.random() * 0.9 + 0.1 : \n    //                 Math.random() * 0.05 + 0.025;\n\n    //             wolf.setScale(scale);\n\n    //             wolf.on(Node.EventType.TOUCH_END, () => this.onWolfFound(wolf), this);\n    //         });\n    //     }\n\n    //     generatePositions(count: number, minX: number, minY: number, maxX: number, maxY: number): Vec2[] {\n    //         const positions: Vec2[] = [];\n    //         const positionSet = new Set<string>();\n\n    //         while (positions.length < count) {\n    //             const x = Math.random() * (maxX - minX) + minX;\n    //             const y = Math.random() * (maxY - minY) + minY;\n    //             const pos = v2(x, y);\n    //             const posKey = `${x},${y}`;\n\n    //             if (!positionSet.has(posKey) && !this.isOverlapping(pos, positions, 150)) {\n    //                 positions.push(pos);\n    //                 positionSet.add(posKey);\n    //             }\n    //         }\n\n    //         return positions;\n    //     }\n\n    //     isOverlapping(newPos: Vec2, existingPositions: Vec2[], minDistance: number): boolean {\n    //         return existingPositions.some(pos => {\n    //             return newPos.sub(pos).mag() < minDistance;\n    //         });\n    //     }\n\n    //     onWolfFound(wolf: Node) {\n    //         if (!this.isGaming) return;\n\n    //         const wolfController = wolf.getComponent(\"WolfController\"); // 假设有WolfController组件\n    //         if (!wolfController.isFound) {\n    //             this.wolvesFound++;\n    //             wolfController.markAsFound();\n\n    //             if (this.wolvesFound >= 10) {\n    //                 this.winGame();\n    //             }\n    //         }\n    //     }\n\n    //     onBackgroundTap(event: Event.EventTouch) {\n    //         if (!this.isGaming) return;\n\n    //         const touchPos = this.background.node.convertToNodeSpaceAR(event.getLocation());\n    //         this.showErrorEffect(touchPos);\n    //         this.remainingTime -= 5;\n    //     }\n\n    //     showErrorEffect(position: Vec2) {\n    //         const effect = instantiate(this.errorEffectPrefab);\n    //         effect.setPosition(position);\n    //         this.background.node.addChild(effect);\n\n    //         tween(effect)\n    //             .to(0.2, { scale: 1.1 })\n    //             .to(0.2, { opacity: 0 })\n    //             .call(() => effect.destroy())\n    //             .start();\n    //     }\n\n    //     update(dt: number) {\n    //         if (!this.isGaming) return;\n\n    //         this.remainingTime -= dt;\n    //         this.timeLabel.string = Math.ceil(this.remainingTime).toString();\n\n    //         if (this.remainingTime <= 0) {\n    //             this.defeat();\n    //         }\n    //     }\n\n    //     winGame() {\n    //         this.isGaming = false;\n    //         this.winNode.active = true;\n    //         this.winNode.opacity = 0;\n\n    //         tween(this.winNode)\n    //             .to(0.2, { opacity: 255 })\n    //             .start();\n    //     }\n\n    //     defeat() {\n    //         this.isGaming = false;\n    //         this.defeatNode.active = true;\n    //         this.defeatNode.opacity = 0;\n\n    //         tween(this.defeatNode)\n    //             .to(0.2, { opacity: 255 })\n    //             .start();\n    //     }\n\n    //     restartGame() {\n    //         this.startGame();\n    //     }\n\n    //     nextLevel() {\n    //         this.currentLevel++;\n    //         this.smallWolvesCount = this.calculateSmallWolvesCount();\n    //         this.startGame();\n    //     }\n\n    //     calculateSmallWolvesCount(): number {\n    //         if (this.currentLevel < 3) return 2;\n    //         if (this.currentLevel < 6) return 4;\n    //         return 6;\n    //     }\n    // }\n\n\n\n\n\n\n}\n\n\n\n\n\n\n"]}