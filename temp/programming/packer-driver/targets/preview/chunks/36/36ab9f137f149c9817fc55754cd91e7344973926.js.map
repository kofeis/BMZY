{"version":3,"sources":["file:///D:/Tool/Project/WoChengYuTeNiu/assets/Script/Other/Debugger.ts"],"names":[],"mappingssourcesContent":["// /* eslint-disable no-console */\n\n// import { sys } from \"cc\";\n\n// /**\n//  * 日志打印\n//  */\n\n// const isDebug = true; // 打印开关，可以根据环境变量去配置\n// interface LogLevel {\n//     log: string;\n//     info: string;\n//     warn: string;\n//     error: string;\n// }\n// const logLevel: Array<keyof LogLevel> = [\"log\", \"info\", \"warn\", \"error\"];\n// const printColorDict: LogLevel = {\n//     // 打印的颜色\n//     log: \"#26a1f9\",\n//     info: \"#24ca39\",\n//     warn: \"#e4c52b\",\n//     error: \"#d21c1c\",\n// };\n\n// interface IDebugger {\n//     log: (...args: any[]) => void;\n//     info: (...args: any[]) => void;\n//     warn: (...args: any[]) => void;\n//     error: (...args: any[]) => void;\n// }\n\n// export default function Debugger(sign: string): IDebugger {\n//     const debug: IDebugger = {\n//         log: () => {},\n//         info: () => {},\n//         warn: () => {},\n//         error: () => {},\n//     };\n//     if (!isDebug) return debug;\n\n//     if (!sys.isNative) {\n//         return prepareConsoleLogger(sign);\n//     }\n\n//     return prepareNativeLogger(sign);\n// }\n\n// function prepareConsoleLogger(sign: string) {\n//     const debug: Partial<IDebugger> = {};\n//     logLevel.forEach((level) => {\n//         debug[level] = (...args: any[]) => {\n//             console.log(\n//                 `%c[${sign}]`,\n//                 `color:${printColorDict[level]}`,\n//                 ...args\n//             );\n//         };\n//     });\n//     return debug as IDebugger;\n// }\n\n// function prepareNativeLogger(sign: string) {\n//     const debug: Partial<IDebugger> = {};\n//     logLevel.forEach((level) => {\n//         debug[level] = (...args: any[]) => {\n//             try {\n//                 const content = JSON.stringify(args);\n//                 chunkString(content, 200).forEach((c) => {\n//                     console.log(`%c[${sign}]`, c);\n//                     if (enableWebsocket) {\n//                         getDefaultSocketLogger().log(sign, JSON.stringify(c));\n//                     }\n//                 });\n//             } catch (error) {\n//                 console.error(`%c[${sign}]`, \"打印内容包含复杂对象\");\n//             }\n//         };\n//     });\n//     return debug as IDebugger;\n// }\n\n// function chunkString(str: string, len: number) {\n//     const size = Math.ceil(str.length / len);\n//     const r: string[] = Array(size);\n//     let offset = 0;\n\n//     for (let i = 0; i < size; i++) {\n//         r[i] = str.substring(offset, offset + len);\n//         offset += len;\n//     }\n\n//     return r;\n// }\n\n// let wsReady: Promise<WebSocket> | null = null;\n// let enableWebsocket = false;\n// let _defaultSocketLogger: IDebugger | null = null;\n// function getDefaultSocketLogger() {\n//     if (!_defaultSocketLogger) {\n//         _defaultSocketLogger = SocketLogger();\n//     }\n//     return _defaultSocketLogger;\n// }\n\n// function SocketLogger() {\n//     const debug: Partial<IDebugger> = {};\n//     logLevel.forEach((level) => {\n//         debug[level] = async (sign: string, info: string) => {\n//             const ws: WebSocket | null = await wsReady;\n//             if (ws && ws.readyState === WebSocket.OPEN) {\n//                 ws.send(`[${sign}] ${level}: ${info}`);\n//             }\n//         };\n//     });\n//     return debug as IDebugger;\n// }\n// /**\n//  * 设置 WebSocket 地址并启用 SocketLogger `ws://ip:port`\n//  * 本地默认端口为 9596\n//  * @param uri\n//  */\n// // export async function setSocketLoggerURI(uri: string) {\n// //     if (!isProd()) {\n// //         enableWebsocket = true;\n// //         if (wsReady) {\n// //             const _ws = await wsReady;\n// //             if (_ws && _ws.readyState === WebSocket.OPEN) {\n// //                 _ws.close();\n// //             }\n// //         }\n// //         wsReady = new Promise((resolve) => {\n// //             const ws = new WebSocket(uri);\n// //             ws.onopen = (event) => {\n// //                 resolve(ws);\n// //             };\n// //             ws.onerror = () => {\n// //                 resolve(null);\n// //             };\n// //             ws.onclose = () => {};\n// //         });\n// //         await wsReady;\n// //     }\n// // }\n"]}