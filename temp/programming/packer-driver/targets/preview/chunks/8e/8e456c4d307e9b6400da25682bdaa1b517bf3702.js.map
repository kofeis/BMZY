{"version":3,"sources":["file:///Users/jingfaxie/Documents/UGit/ZhiShangGouBuDao/assets/Script/Game/GameMode/PanelFindActor.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA","sourcesContent":["// import { _decorator, Component, find, instantiate, Label, Node, Prefab, resources, Sprite, SpriteFrame, tween, UITransform, v2, v3, Vec2, Animation, log, UIOpacity } from 'cc';\n// import { PanelTemplate } from './PanelTemplate';\n// import { Tool_Other } from '../../Tool/Tool_Other';\n// import { Tool_UI } from '../../Tool/Tool_UI';\n// import { Tool_Event } from '../../Tool/Tool_Event';\n// import { PlatformApi } from '../../Other/SDK/PlatformApi';\n// const { ccclass, property } = _decorator;\n\n// @ccclass('PanelFindActor')\n// export class PanelFindActor extends PanelTemplate {\n\n//     /**关卡等级 */\n//     FindActorLevel: number = null;\n\n//     /**关卡背景 */\n//     LevelBg: Node = null;\n//     /**演员节点 */\n//     Actors: Node = null;\n\n//     Min_X: number = null;\n//     Max_X: number = null;\n//     Min_Y: number = null;\n//     Max_Y: number = null;\n\n\n//     /**演员数量 */\n//     ActorNumber: number = 10;\n\n//     /**缩放配置 */\n//     ScaleArr: number[] = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1];\n\n//     async onLoad() {\n//         super.onLoad();\n//     }\n\n//     async onEnable() {\n//         if (!this.IsInit) {\n//             await this.LoadPanel();\n//         }\n//         this.GameStart();\n//         this.Resoure_Data.Music_Play(\"Audio/BGMGame\");\n//     }\n\n//     async start() {\n\n//     }\n\n//     /**加载面板 */\n//     async LoadPanel(): Promise<void> {\n//         return new Promise(async (resolve, reject) => {\n//             /**绑定关键节点 */\n//             this.LevelBg = find(\"Window/LevelBg\", this.node);\n//             this.Actors = find(\"Window/Actors\", this.node);\n//             this.BtnTip = find(\"Panel/PanelBtn/BtnTip\", this.node);\n//             this.BtnSetting = find(\"Panel/PanelBtn/BtnSetting\", this.node);\n//             this.PanelVictory = find(\"Panel/PanelVictory\", this.node);\n//             this.PanelVictory.active = false;\n//             this.BtnNext = find(\"BtnNext\", this.PanelVictory);\n\n//             this.Max_X = this.Actors.getComponent(UITransform).width / 2;\n//             this.Min_X = -this.Max_X;\n//             this.Max_Y = this.Actors.getComponent(UITransform).height / 2;\n//             this.Min_Y = -this.Max_Y;\n//             /**注册按钮事件 */\n//             await this.OnBtn(this.Game_Script.AnimSwitch);\n//             this.IsInit = true;\n//             resolve();\n//         });\n//     }\n\n//     /**注册按钮 */\n//     async OnBtn(AnimSwitch: boolean = false) {\n//         /**设置按钮事件 */\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnTip, this.BtnTipCall, this);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnNext, this.BtnNextCall, this);\n//         Tool_Event.instance.On_Event_TOUCH_END(this.BtnSetting, this.BtnSettingCall, this);\n//         /**设置按钮动画 */\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnTip, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnNext, AnimSwitch);\n//         Tool_Event.instance.Set_Btn_Event_Anim(this.BtnSetting, AnimSwitch);\n\n\n\n\n\n\n//         Tool_Event.instance.On_Event_TOUCH_END(find(\"Window/LevelBg\", this.node), this.ChooseWrongCall, this);\n\n//         let PrefabActor = await this.Resoure_Data.Load_Prefab(\"Prefab/PanelFindActor/Actor\");\n\n//         for (let i = 0; i < this.ActorNumber; i++) {\n//             let Actor = Tool_UI.instance.Set_Prefab_Node(PrefabActor, this.Actors, v3(0, 0, 0), \"\");\n//             Tool_Event.instance.On_Event_TOUCH_END(Actor, () => {\n//                 if (Actor.getChildByName(\"Select\").active) {\n//                     return;\n//                 }\n//                 this.ChooseCorrectCall(Actor);\n//                 this.Score++;\n//                 if (this.Score == this.ScoreTarget) {\n//                     this.GameVictory();\n//                 }\n//             })\n//             Actor.getChildByName(\"Tip\").active = false;\n//             Actor.getChildByName(\"Select\").active = false;\n//         }\n\n\n//     }\n\n\n\n\n//     /**游戏初始 */\n//     GameInit() {\n//         this.Score = 0;\n//         this.ScoreTarget = 10;\n//     }\n\n//     /**游戏开始 */\n//     async GameStart() {\n//         this.GameInit();\n//         this.PanelVictory.active = false;\n//         this.node.getChildByName(\"Title\").getChildByName(\"Leves\").getComponent(Label).string = `找找小熊·${this.Game_Script.FindActorLevel + 1}关`;\n//         let PosArr = Tool_Other.instance.Get_Random_Pos_Arr(this.Actors.children.length, this.Min_X, this.Max_X, this.Min_Y, this.Max_Y, 200);\n//         for (let i = 0; i < this.Actors.children.length; i++) {\n//             this.Actors.children[i].position = PosArr[i];\n//             this.Actors.children[i].getChildByName(\"Sp\").scale = v3(this.ScaleArr[i], this.ScaleArr[i], 1);\n//             this.Actors.children[i].getChildByName(\"Sp\").getComponent(Animation).play();\n//             this.Actors.children[i].getChildByName(\"Tip\").active = false;\n//             this.Actors.children[i].getChildByName(\"Select\").active = false;\n//         }\n\n//     }\n\n//     /**游戏胜利 */\n//     GameVictory() {\n//         /**胜利音效 */\n//         this.Resoure_Data.Sound_Play(\"Audio/Sound/Victory\");\n\n\n//         PlatformApi.instance.showInterstitialAd();\n//         this.Game_Script.FindActorLevel++;\n//         this.Game_Script.FindActorScore += this.Game_Script.IsHint ? 1 : 2;\n//         /**保存数据 */\n//         this.Game_Script.DataSet();\n//         this.Game_Script.UpdateScene();\n//         find(\"WinBanner/Condition1/Correct\", this.PanelVictory).active = !this.Game_Script.IsHint\n//         find(\"WinBanner/Condition1/Wrong\", this.PanelVictory).active = this.Game_Script.IsHint;\n//         find(\"WinBanner/Stars/StarR\", this.PanelVictory).getComponent(Sprite).grayscale = this.Game_Script.IsHint;\n//         find(\"Light\", this.PanelVictory).getComponent(Animation).play();\n//         this.PanelVictory.active = true;\n\n//     }\n\n\n//     /**选择正确回调 */\n//     ChooseCorrectCall(Actor: Node) {\n//         Actor.getChildByName(\"Tip\").active = false;\n//         Actor.getChildByName(\"Select\").active = true;\n//         tween(Actor.getChildByName(\"Select\").getComponent(Sprite))\n//             .set({ fillRange: 0 })\n//             .to(0.2, { fillRange: 1 })\n//             .start();\n//     };\n\n//     /**选择错误回调 */\n//     async ChooseWrongCall(Event: any) {\n//         /**错误 */\n//         this.Resoure_Data.Sound_Play(\"Audio/Sound/Error\");\n//         let PrefabError = await this.Resoure_Data.Load_Prefab(\"Prefab/PanelFindActor/Error\");\n//         let Parent = find(\"Window/LevelBg\", this.node);\n//         let Pos_Touch = Tool_UI.instance.Get_Touch_Position(Event);\n//         let NodeError = Tool_UI.instance.Set_Prefab_Node(PrefabError, Parent, Pos_Touch, \"\");\n//         tween(NodeError)\n//             .parallel(\n//                 tween().to(0.5, { scale: v3(1.2, 1.2, 1) }),\n//                 tween(NodeError.getComponent(UIOpacity)).to(0.5, { opacity: 0 })\n//             )\n//             .call(() => {\n//                 NodeError.destroy();\n//             })\n//             .start();\n//     }\n\n//     /**提示按钮回调 */\n//     BtnTipCall() {\n//         this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//         let NodeTip: Node = null;\n//         this.Actors.children.forEach((element) => {\n//             if (!element.getChildByName(\"Select\").active && !element.getChildByName(\"Tip\").active) {\n//                 NodeTip = element.getChildByName(\"Tip\");\n//                 return;\n//             }\n//         });\n//         if (NodeTip == null) {\n//             console.log(\"没有可以提示的了\");\n//         } else {\n//             NodeTip.active = true;\n//             this.Game_Script.IsHint = true;\n//         }\n//     }\n\n//     /**下一关按钮回调 */\n//     BtnNextCall() {\n//         this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//         this.GameStart();\n//     }\n\n//     /**设置按钮回调 */\n//     BtnSettingCall() {\n//         this.Resoure_Data.Sound_Play(\"Audio/SoundBtn\");\n//         this.Game_Script.UpdatePanelSetting(true);\n//     }\n\n\n//     //     startGame() {\n//     //         this.winNode.active = false;\n//     //         this.defeatNode.active = false;\n//     //         this.clearWolves();\n//     //         this.setupBackground();\n//     //         this.spawnWolves();\n//     //         this.isGaming = true;\n//     //         this.wolvesFound = 0;\n//     //         this.remainingTime = 60;\n//     //     }\n\n//     //     clearWolves() {\n//     //         this.wolvesContainer.removeAllChildren();\n//     //     }\n\n//     //     setupBackground() {\n//     //         const bgIndex = (this.currentLevel - 1) % this.levelBackgrounds.length;\n//     //         this.background.spriteFrame = new SpriteFrame(resources.get(this.levelBackgrounds[bgIndex]));\n//     //     }\n\n//     //     spawnWolves() {\n//     //         const positions = this.generatePositions(10, -300, -410, 300, 410);\n\n//     //         positions.forEach((pos, index) => {\n//     //             const Actor = instantiate(this.ActorPrefab);\n//     //             Actor.setPosition(pos);\n//     //             this.wolvesContainer.addChild(Actor);\n\n//     //             const scale = index < 10 - this.smallWolvesCount ? \n//     //                 Math.random() * 0.9 + 0.1 : \n//     //                 Math.random() * 0.05 + 0.025;\n\n//     //             Actor.setScale(scale);\n\n//     //             Actor.on(Node.EventType.TOUCH_END, () => this.onActorFound(Actor), this);\n//     //         });\n//     //     }\n\n//     //     generatePositions(count: number, minX: number, minY: number, maxX: number, maxY: number): Vec2[] {\n//     //         const positions: Vec2[] = [];\n//     //         const positionSet = new Set<string>();\n\n//     //         while (positions.length < count) {\n//     //             const x = Math.random() * (maxX - minX) + minX;\n//     //             const y = Math.random() * (maxY - minY) + minY;\n//     //             const pos = v2(x, y);\n//     //             const posKey = `${x},${y}`;\n\n//     //             if (!positionSet.has(posKey) && !this.isOverlapping(pos, positions, 150)) {\n//     //                 positions.push(pos);\n//     //                 positionSet.add(posKey);\n//     //             }\n//     //         }\n\n//     //         return positions;\n//     //     }\n\n//     //     isOverlapping(newPos: Vec2, existingPositions: Vec2[], minDistance: number): boolean {\n//     //         return existingPositions.some(pos => {\n//     //             return newPos.sub(pos).mag() < minDistance;\n//     //         });\n//     //     }\n\n//     //     onActorFound(Actor: Node) {\n//     //         if (!this.isGaming) return;\n\n//     //         const ActorController = Actor.getComponent(\"ActorController\"); // 假设有ActorController组件\n//     //         if (!ActorController.isFound) {\n//     //             this.wolvesFound++;\n//     //             ActorController.markAsFound();\n\n//     //             if (this.wolvesFound >= 10) {\n//     //                 this.winGame();\n//     //             }\n//     //         }\n//     //     }\n\n//     //     onBackgroundTap(event: Event.EventTouch) {\n//     //         if (!this.isGaming) return;\n\n//     //         const touchPos = this.background.node.convertToNodeSpaceAR(event.getLocation());\n//     //         this.showErrorEffect(touchPos);\n//     //         this.remainingTime -= 5;\n//     //     }\n\n//     //     showErrorEffect(position: Vec2) {\n//     //         const effect = instantiate(this.errorEffectPrefab);\n//     //         effect.setPosition(position);\n//     //         this.background.node.addChild(effect);\n\n//     //         tween(effect)\n//     //             .to(0.2, { scale: 1.1 })\n//     //             .to(0.2, { opacity: 0 })\n//     //             .call(() => effect.destroy())\n//     //             .start();\n//     //     }\n\n//     //     update(dt: number) {\n//     //         if (!this.isGaming) return;\n\n//     //         this.remainingTime -= dt;\n//     //         this.timeLabel.string = Math.ceil(this.remainingTime).toString();\n\n//     //         if (this.remainingTime <= 0) {\n//     //             this.defeat();\n//     //         }\n//     //     }\n\n//     //     winGame() {\n//     //         this.isGaming = false;\n//     //         this.winNode.active = true;\n//     //         this.winNode.opacity = 0;\n\n//     //         tween(this.winNode)\n//     //             .to(0.2, { opacity: 255 })\n//     //             .start();\n//     //     }\n\n//     //     defeat() {\n//     //         this.isGaming = false;\n//     //         this.defeatNode.active = true;\n//     //         this.defeatNode.opacity = 0;\n\n//     //         tween(this.defeatNode)\n//     //             .to(0.2, { opacity: 255 })\n//     //             .start();\n//     //     }\n\n//     //     restartGame() {\n//     //         this.startGame();\n//     //     }\n\n//     //     nextLevel() {\n//     //         this.currentLevel++;\n//     //         this.smallWolvesCount = this.calculateSmallWolvesCount();\n//     //         this.startGame();\n//     //     }\n\n//     //     calculateSmallWolvesCount(): number {\n//     //         if (this.currentLevel < 3) return 2;\n//     //         if (this.currentLevel < 6) return 4;\n//     //         return 6;\n//     //     }\n//     // }\n\n\n\n\n\n\n// }\n\n\n\n\n\n\n"]}